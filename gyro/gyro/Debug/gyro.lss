
gyro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  000016a4  00001738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080016e  0080016e  000017a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cf  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b2  00000000  00000000  00002adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  0000338d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00003d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  00003eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061c  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	96 c0       	rjmp	.+300    	; 0x12e <__ctors_end>
       2:	b0 c0       	rjmp	.+352    	; 0x164 <__bad_interrupt>
       4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
       6:	ae c0       	rjmp	.+348    	; 0x164 <__bad_interrupt>
       8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
       a:	ac c0       	rjmp	.+344    	; 0x164 <__bad_interrupt>
       c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
       e:	aa c0       	rjmp	.+340    	; 0x164 <__bad_interrupt>
      10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
      12:	a8 c0       	rjmp	.+336    	; 0x164 <__bad_interrupt>
      14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
      16:	a6 c0       	rjmp	.+332    	; 0x164 <__bad_interrupt>
      18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
      1a:	a4 c0       	rjmp	.+328    	; 0x164 <__bad_interrupt>
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
      1e:	a2 c0       	rjmp	.+324    	; 0x164 <__bad_interrupt>
      20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
      22:	a0 c0       	rjmp	.+320    	; 0x164 <__bad_interrupt>
      24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
      26:	9e c0       	rjmp	.+316    	; 0x164 <__bad_interrupt>
      28:	9d c0       	rjmp	.+314    	; 0x164 <__bad_interrupt>
      2a:	9c c0       	rjmp	.+312    	; 0x164 <__bad_interrupt>
      2c:	9b c0       	rjmp	.+310    	; 0x164 <__bad_interrupt>
      2e:	9a c0       	rjmp	.+308    	; 0x164 <__bad_interrupt>
      30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
      32:	98 c0       	rjmp	.+304    	; 0x164 <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	00 40       	sbci	r16, 0x00	; 0
      36:	7a 10       	cpse	r7, r10
      38:	f3 5a       	subi	r31, 0xA3	; 163
      3a:	00 a0       	ldd	r0, Z+32	; 0x20
      3c:	72 4e       	sbci	r23, 0xE2	; 226
      3e:	18 09       	sbc	r17, r8
      40:	00 10       	cpse	r0, r0
      42:	a5 d4       	rcall	.+2378   	; 0x98e <__divsf3_pse+0x12>
      44:	e8 00       	.word	0x00e8	; ????
      46:	00 e8       	ldi	r16, 0x80	; 128
      48:	76 48       	sbci	r23, 0x86	; 134
      4a:	17 00       	.word	0x0017	; ????
      4c:	00 e4       	ldi	r16, 0x40	; 64
      4e:	0b 54       	subi	r16, 0x4B	; 75
      50:	02 00       	.word	0x0002	; ????
      52:	00 ca       	rjmp	.-3072   	; 0xfffff454 <__eeprom_end+0xff7ef454>
      54:	9a 3b       	cpi	r25, 0xBA	; 186
      56:	00 00       	nop
      58:	00 e1       	ldi	r16, 0x10	; 16
      5a:	f5 05       	cpc	r31, r5
      5c:	00 00       	nop
      5e:	80 96       	adiw	r24, 0x20	; 32
      60:	98 00       	.word	0x0098	; ????
      62:	00 00       	nop
      64:	40 42       	sbci	r20, 0x20	; 32
      66:	0f 00       	.word	0x000f	; ????
      68:	00 00       	nop
      6a:	a0 86       	std	Z+8, r10	; 0x08
      6c:	01 00       	.word	0x0001	; ????
      6e:	00 00       	nop
      70:	10 27       	eor	r17, r16
      72:	00 00       	nop
      74:	00 00       	nop
      76:	e8 03       	fmulsu	r22, r16
      78:	00 00       	nop
      7a:	00 00       	nop
      7c:	64 00       	.word	0x0064	; ????
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	0a 00       	.word	0x000a	; ????
      84:	00 00       	nop
      86:	00 00       	nop
      88:	01 00       	.word	0x0001	; ????
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	2c 76       	andi	r18, 0x6C	; 108
      90:	d8 88       	ldd	r13, Y+16	; 0x10
      92:	dc 67       	ori	r29, 0x7C	; 124
      94:	4f 08       	sbc	r4, r15
      96:	23 df       	rcall	.-442    	; 0xfffffede <__eeprom_end+0xff7efede>
      98:	c1 df       	rcall	.-126    	; 0x1c <__FUSE_REGION_LENGTH__+0x19>
      9a:	ae 59       	subi	r26, 0x9E	; 158
      9c:	e1 b1       	in	r30, 0x01	; 1
      9e:	b7 96       	adiw	r30, 0x27	; 39
      a0:	e5 e3       	ldi	r30, 0x35	; 53
      a2:	e4 53       	subi	r30, 0x34	; 52
      a4:	c6 3a       	cpi	r28, 0xA6	; 166
      a6:	e6 51       	subi	r30, 0x16	; 22
      a8:	99 76       	andi	r25, 0x69	; 105
      aa:	96 e8       	ldi	r25, 0x86	; 134
      ac:	e6 c2       	rjmp	.+1484   	; 0x67a <__stack+0x17b>
      ae:	84 26       	eor	r8, r20
      b0:	eb 89       	ldd	r30, Y+19	; 0x13
      b2:	8c 9b       	sbis	0x11, 4	; 17
      b4:	62 ed       	ldi	r22, 0xD2	; 210
      b6:	40 7c       	andi	r20, 0xC0	; 192
      b8:	6f fc       	.word	0xfc6f	; ????
      ba:	ef bc       	out	0x2f, r14	; 47
      bc:	9c 9f       	mul	r25, r28
      be:	40 f2       	brcs	.-112    	; 0x50 <__SREG__+0x11>
      c0:	ba a5       	ldd	r27, Y+42	; 0x2a
      c2:	6f a5       	ldd	r22, Y+47	; 0x2f
      c4:	f4 90       	lpm	r15, Z
      c6:	05 5a       	subi	r16, 0xA5	; 165
      c8:	2a f7       	brpl	.-54     	; 0x94 <__SREG__+0x55>
      ca:	5c 93       	st	X, r21
      cc:	6b 6c       	ori	r22, 0xCB	; 203
      ce:	f9 67       	ori	r31, 0x79	; 121
      d0:	6d c1       	rjmp	.+730    	; 0x3ac <Read_RawValue+0xa4>
      d2:	1b fc       	.word	0xfc1b	; ????
      d4:	e0 e4       	ldi	r30, 0x40	; 64
      d6:	0d 47       	sbci	r16, 0x7D	; 125
      d8:	fe f5       	brtc	.+126    	; 0x158 <.do_clear_bss_loop>
      da:	20 e6       	ldi	r18, 0x60	; 96
      dc:	b5 00       	.word	0x00b5	; ????
      de:	d0 ed       	ldi	r29, 0xD0	; 208
      e0:	90 2e       	mov	r9, r16
      e2:	03 00       	.word	0x0003	; ????
      e4:	94 35       	cpi	r25, 0x54	; 84
      e6:	77 05       	cpc	r23, r7
      e8:	00 80       	ld	r0, Z
      ea:	84 1e       	adc	r8, r20
      ec:	08 00       	.word	0x0008	; ????
      ee:	00 20       	and	r0, r0
      f0:	4e 0a       	sbc	r4, r30
      f2:	00 00       	nop
      f4:	00 c8       	rjmp	.-4096   	; 0xfffff0f6 <__eeprom_end+0xff7ef0f6>
      f6:	0c 33       	cpi	r16, 0x3C	; 60
      f8:	33 33       	cpi	r19, 0x33	; 51
      fa:	33 0f       	add	r19, r19
      fc:	98 6e       	ori	r25, 0xE8	; 232
      fe:	12 83       	std	Z+2, r17	; 0x02
     100:	11 41       	sbci	r17, 0x11	; 17
     102:	ef 8d       	ldd	r30, Y+31	; 0x1f
     104:	21 14       	cp	r2, r1
     106:	89 3b       	cpi	r24, 0xB9	; 185
     108:	e6 55       	subi	r30, 0x56	; 86
     10a:	16 cf       	rjmp	.-468    	; 0xffffff38 <__eeprom_end+0xff7eff38>
     10c:	fe e6       	ldi	r31, 0x6E	; 110
     10e:	db 18       	sub	r13, r11
     110:	d1 84       	ldd	r13, Z+9	; 0x09
     112:	4b 38       	cpi	r20, 0x8B	; 139
     114:	1b f7       	brvc	.-58     	; 0xdc <__SREG__+0x9d>
     116:	7c 1d       	adc	r23, r12
     118:	90 1d       	adc	r25, r0
     11a:	a4 bb       	out	0x14, r26	; 20
     11c:	e4 24       	eor	r14, r4
     11e:	20 32       	cpi	r18, 0x20	; 32
     120:	84 72       	andi	r24, 0x24	; 36
     122:	5e 22       	and	r5, r30
     124:	81 00       	.word	0x0081	; ????
     126:	c9 f1       	breq	.+114    	; 0x19a <I2C_Repeated_Start+0x28>
     128:	24 ec       	ldi	r18, 0xC4	; 196
     12a:	a1 e5       	ldi	r26, 0x51	; 81
     12c:	3d 27       	eor	r19, r29

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d4 e0       	ldi	r29, 0x04	; 4
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e4 ea       	ldi	r30, 0xA4	; 164
     142:	f6 e1       	ldi	r31, 0x16	; 22
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
     146:	05 90       	lpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	ae 36       	cpi	r26, 0x6E	; 110
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	ae e6       	ldi	r26, 0x6E	; 110
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a2 39       	cpi	r26, 0x92	; 146
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	95 d1       	rcall	.+810    	; 0x48c <main>
     162:	9e ca       	rjmp	.-2756   	; 0xfffff6a0 <__eeprom_end+0xff7ef6a0>

00000164 <__bad_interrupt>:
     164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     166:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     16a:	80 e2       	ldi	r24, 0x20	; 32
     16c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     170:	08 95       	ret

00000172 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     172:	94 ea       	ldi	r25, 0xA4	; 164
     174:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     178:	ec eb       	ldi	r30, 0xBC	; 188
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	90 81       	ld	r25, Z
     17e:	99 23       	and	r25, r25
     180:	ec f7       	brge	.-6      	; 0x17c <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     182:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     186:	98 7f       	andi	r25, 0xF8	; 248
     188:	90 31       	cpi	r25, 0x10	; 16
     18a:	99 f4       	brne	.+38     	; 0x1b2 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     18c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     196:	ec eb       	ldi	r30, 0xBC	; 188
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	88 23       	and	r24, r24
     19e:	ec f7       	brge	.-6      	; 0x19a <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     1a4:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     1a6:	80 34       	cpi	r24, 0x40	; 64
     1a8:	31 f0       	breq	.+12     	; 0x1b6 <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     1aa:	80 32       	cpi	r24, 0x20	; 32
     1ac:	31 f0       	breq	.+12     	; 0x1ba <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     1ba:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1bc:	08 95       	ret

000001be <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     1be:	84 e9       	ldi	r24, 0x94	; 148
     1c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     1c4:	ec eb       	ldi	r30, 0xBC	; 188
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	84 fd       	sbrc	r24, 4
     1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <I2C_Stop+0xa>
}
     1ce:	08 95       	ret

000001d0 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     1d0:	bf 92       	push	r11
     1d2:	cf 92       	push	r12
     1d4:	df 92       	push	r13
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     1e4:	cc eb       	ldi	r28, 0xBC	; 188
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
     1e8:	0f 2e       	mov	r0, r31
     1ea:	f4 ea       	ldi	r31, 0xA4	; 164
     1ec:	df 2e       	mov	r13, r31
     1ee:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     1f0:	09 eb       	ldi	r16, 0xB9	; 185
     1f2:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     1f4:	0f 2e       	mov	r0, r31
     1f6:	fb eb       	ldi	r31, 0xBB	; 187
     1f8:	ef 2e       	mov	r14, r31
     1fa:	f1 2c       	mov	r15, r1
     1fc:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     1fe:	0f 2e       	mov	r0, r31
     200:	f4 e8       	ldi	r31, 0x84	; 132
     202:	cf 2e       	mov	r12, r31
     204:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     206:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     208:	88 81       	ld	r24, Y
     20a:	88 23       	and	r24, r24
     20c:	ec f7       	brge	.-6      	; 0x208 <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     20e:	f8 01       	movw	r30, r16
     210:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     212:	88 7f       	andi	r24, 0xF8	; 248
     214:	88 30       	cpi	r24, 0x08	; 8
     216:	b9 f7       	brne	.-18     	; 0x206 <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     218:	f7 01       	movw	r30, r14
     21a:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     21c:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     21e:	88 81       	ld	r24, Y
     220:	88 23       	and	r24, r24
     222:	ec f7       	brge	.-6      	; 0x21e <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     224:	f8 01       	movw	r30, r16
     226:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     228:	88 7f       	andi	r24, 0xF8	; 248
     22a:	88 31       	cpi	r24, 0x18	; 24
     22c:	11 f0       	breq	.+4      	; 0x232 <I2C_Start_Wait+0x62>
		{
			I2C_Stop();										/* If not then generate stop condition */
     22e:	c7 df       	rcall	.-114    	; 0x1be <I2C_Stop>
			continue;										/* continue with start loop again */
     230:	ea cf       	rjmp	.-44     	; 0x206 <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	df 90       	pop	r13
     240:	cf 90       	pop	r12
     242:	bf 90       	pop	r11
     244:	08 95       	ret

00000246 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     246:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     24a:	84 e8       	ldi	r24, 0x84	; 132
     24c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     250:	ec eb       	ldi	r30, 0xBC	; 188
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	88 23       	and	r24, r24
     258:	ec f7       	brge	.-6      	; 0x254 <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     25a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     25e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     260:	88 32       	cpi	r24, 0x28	; 40
     262:	21 f0       	breq	.+8      	; 0x26c <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     264:	80 33       	cpi	r24, 0x30	; 48
     266:	21 f0       	breq	.+8      	; 0x270 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
     270:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     272:	08 95       	ret

00000274 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     274:	84 ec       	ldi	r24, 0xC4	; 196
     276:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     27a:	ec eb       	ldi	r30, 0xBC	; 188
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	88 23       	and	r24, r24
     282:	ec f7       	brge	.-6      	; 0x27e <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
     284:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
     288:	08 95       	ret

0000028a <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     28a:	84 e8       	ldi	r24, 0x84	; 132
     28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     290:	ec eb       	ldi	r30, 0xBC	; 188
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	88 23       	and	r24, r24
     298:	ec f7       	brge	.-6      	; 0x294 <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
     29a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
     29e:	08 95       	ret

000002a0 <Gyro_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a0:	2f e7       	ldi	r18, 0x7F	; 127
     2a2:	89 ea       	ldi	r24, 0xA9	; 169
     2a4:	93 e0       	ldi	r25, 0x03	; 3
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <Gyro_Init+0x6>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <Gyro_Init+0x10>
     2b0:	00 00       	nop
float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,dis_x,dis_y,dis_z;

void Gyro_Init()		
{
	_delay_ms(150);		
	I2C_Start_Wait(0xD0);
     2b2:	80 ed       	ldi	r24, 0xD0	; 208
     2b4:	8d df       	rcall	.-230    	; 0x1d0 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);
     2b6:	89 e1       	ldi	r24, 0x19	; 25
     2b8:	c6 df       	rcall	.-116    	; 0x246 <I2C_Write>
	I2C_Write(0x07);	
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	c4 df       	rcall	.-120    	; 0x246 <I2C_Write>
	I2C_Stop();
     2be:	7f df       	rcall	.-258    	; 0x1be <I2C_Stop>

	I2C_Start_Wait(0xD0);
     2c0:	80 ed       	ldi	r24, 0xD0	; 208
     2c2:	86 df       	rcall	.-244    	; 0x1d0 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);
     2c4:	8b e6       	ldi	r24, 0x6B	; 107
     2c6:	bf df       	rcall	.-130    	; 0x246 <I2C_Write>
	I2C_Write(0x01);	
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	bd df       	rcall	.-134    	; 0x246 <I2C_Write>
	I2C_Stop(); 
     2cc:	78 df       	rcall	.-272    	; 0x1be <I2C_Stop>

	I2C_Start_Wait(0xD0);
     2ce:	80 ed       	ldi	r24, 0xD0	; 208
     2d0:	7f df       	rcall	.-258    	; 0x1d0 <I2C_Start_Wait>
	I2C_Write(CONFIG);	
     2d2:	8a e1       	ldi	r24, 0x1A	; 26
     2d4:	b8 df       	rcall	.-144    	; 0x246 <I2C_Write>
	I2C_Write(0x00);	
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	b6 df       	rcall	.-148    	; 0x246 <I2C_Write>
	I2C_Stop();
     2da:	71 df       	rcall	.-286    	; 0x1be <I2C_Stop>

	I2C_Start_Wait(0xD0);
     2dc:	80 ed       	ldi	r24, 0xD0	; 208
     2de:	78 df       	rcall	.-272    	; 0x1d0 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);
     2e0:	8b e1       	ldi	r24, 0x1B	; 27
     2e2:	b1 df       	rcall	.-158    	; 0x246 <I2C_Write>
	I2C_Write(0x18);	
     2e4:	88 e1       	ldi	r24, 0x18	; 24
     2e6:	af df       	rcall	.-162    	; 0x246 <I2C_Write>
	I2C_Stop();
     2e8:	6a df       	rcall	.-300    	; 0x1be <I2C_Stop>

	I2C_Start_Wait(0xD0);
     2ea:	80 ed       	ldi	r24, 0xD0	; 208
     2ec:	71 df       	rcall	.-286    	; 0x1d0 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);	
     2ee:	88 e3       	ldi	r24, 0x38	; 56
     2f0:	aa df       	rcall	.-172    	; 0x246 <I2C_Write>
	I2C_Write(0x01);
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	a8 df       	rcall	.-176    	; 0x246 <I2C_Write>
	I2C_Stop();
     2f6:	63 df       	rcall	.-314    	; 0x1be <I2C_Stop>
     2f8:	08 95       	ret

000002fa <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);	
     2fa:	80 ed       	ldi	r24, 0xD0	; 208
     2fc:	69 df       	rcall	.-302    	; 0x1d0 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);
     2fe:	8b e3       	ldi	r24, 0x3B	; 59
     300:	a2 df       	rcall	.-188    	; 0x246 <I2C_Write>
	I2C_Repeated_Start(0xD1);
     302:	81 ed       	ldi	r24, 0xD1	; 209
     304:	36 df       	rcall	.-404    	; 0x172 <I2C_Repeated_Start>
     306:	08 95       	ret

00000308 <Read_RawValue>:
}
void Read_RawValue()
{
     308:	cf 93       	push	r28
	MPU_Start_Loc();									
     30a:	f7 df       	rcall	.-18     	; 0x2fa <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     30c:	b3 df       	rcall	.-154    	; 0x274 <I2C_Read_Ack>
     30e:	c8 2f       	mov	r28, r24
     310:	b1 df       	rcall	.-158    	; 0x274 <I2C_Read_Ack>
     312:	6c 2f       	mov	r22, r28
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	76 2f       	mov	r23, r22
     318:	66 27       	eor	r22, r22
     31a:	68 2b       	or	r22, r24
     31c:	07 2e       	mov	r0, r23
     31e:	00 0c       	add	r0, r0
     320:	88 0b       	sbc	r24, r24
     322:	99 0b       	sbc	r25, r25
     324:	86 d3       	rcall	.+1804   	; 0xa32 <__floatsisf>
     326:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <Acc_x>
     32a:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <Acc_x+0x1>
     32e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <Acc_x+0x2>
     332:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     336:	9e df       	rcall	.-196    	; 0x274 <I2C_Read_Ack>
     338:	c8 2f       	mov	r28, r24
     33a:	9c df       	rcall	.-200    	; 0x274 <I2C_Read_Ack>
     33c:	6c 2f       	mov	r22, r28
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	76 2f       	mov	r23, r22
     342:	66 27       	eor	r22, r22
     344:	68 2b       	or	r22, r24
     346:	07 2e       	mov	r0, r23
     348:	00 0c       	add	r0, r0
     34a:	88 0b       	sbc	r24, r24
     34c:	99 0b       	sbc	r25, r25
     34e:	71 d3       	rcall	.+1762   	; 0xa32 <__floatsisf>
     350:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <Acc_y>
     354:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <Acc_y+0x1>
     358:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <Acc_y+0x2>
     35c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     360:	89 df       	rcall	.-238    	; 0x274 <I2C_Read_Ack>
     362:	c8 2f       	mov	r28, r24
     364:	87 df       	rcall	.-242    	; 0x274 <I2C_Read_Ack>
     366:	6c 2f       	mov	r22, r28
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	76 2f       	mov	r23, r22
     36c:	66 27       	eor	r22, r22
     36e:	68 2b       	or	r22, r24
     370:	07 2e       	mov	r0, r23
     372:	00 0c       	add	r0, r0
     374:	88 0b       	sbc	r24, r24
     376:	99 0b       	sbc	r25, r25
     378:	5c d3       	rcall	.+1720   	; 0xa32 <__floatsisf>
     37a:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <__data_end>
     37e:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <__data_end+0x1>
     382:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end+0x2>
     386:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <__data_end+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     38a:	74 df       	rcall	.-280    	; 0x274 <I2C_Read_Ack>
     38c:	c8 2f       	mov	r28, r24
     38e:	72 df       	rcall	.-284    	; 0x274 <I2C_Read_Ack>
     390:	6c 2f       	mov	r22, r28
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	76 2f       	mov	r23, r22
     396:	66 27       	eor	r22, r22
     398:	68 2b       	or	r22, r24
     39a:	07 2e       	mov	r0, r23
     39c:	00 0c       	add	r0, r0
     39e:	88 0b       	sbc	r24, r24
     3a0:	99 0b       	sbc	r25, r25
     3a2:	47 d3       	rcall	.+1678   	; 0xa32 <__floatsisf>
     3a4:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <Gyro_x>
     3a8:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <Gyro_x+0x1>
     3ac:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <Gyro_x+0x2>
     3b0:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     3b4:	5f df       	rcall	.-322    	; 0x274 <I2C_Read_Ack>
     3b6:	c8 2f       	mov	r28, r24
     3b8:	5d df       	rcall	.-326    	; 0x274 <I2C_Read_Ack>
     3ba:	6c 2f       	mov	r22, r28
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	76 2f       	mov	r23, r22
     3c0:	66 27       	eor	r22, r22
     3c2:	68 2b       	or	r22, r24
     3c4:	07 2e       	mov	r0, r23
     3c6:	00 0c       	add	r0, r0
     3c8:	88 0b       	sbc	r24, r24
     3ca:	99 0b       	sbc	r25, r25
     3cc:	32 d3       	rcall	.+1636   	; 0xa32 <__floatsisf>
     3ce:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <Gyro_y>
     3d2:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <Gyro_y+0x1>
     3d6:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <Gyro_y+0x2>
     3da:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     3de:	4a df       	rcall	.-364    	; 0x274 <I2C_Read_Ack>
     3e0:	c8 2f       	mov	r28, r24
     3e2:	48 df       	rcall	.-368    	; 0x274 <I2C_Read_Ack>
     3e4:	6c 2f       	mov	r22, r28
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	76 2f       	mov	r23, r22
     3ea:	66 27       	eor	r22, r22
     3ec:	68 2b       	or	r22, r24
     3ee:	07 2e       	mov	r0, r23
     3f0:	00 0c       	add	r0, r0
     3f2:	88 0b       	sbc	r24, r24
     3f4:	99 0b       	sbc	r25, r25
     3f6:	1d d3       	rcall	.+1594   	; 0xa32 <__floatsisf>
     3f8:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <Gyro_z>
     3fc:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <Gyro_z+0x1>
     400:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <Gyro_z+0x2>
     404:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <Gyro_z+0x3>
	dis_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     408:	35 df       	rcall	.-406    	; 0x274 <I2C_Read_Ack>
     40a:	c8 2f       	mov	r28, r24
     40c:	33 df       	rcall	.-410    	; 0x274 <I2C_Read_Ack>
     40e:	6c 2f       	mov	r22, r28
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	76 2f       	mov	r23, r22
     414:	66 27       	eor	r22, r22
     416:	68 2b       	or	r22, r24
     418:	07 2e       	mov	r0, r23
     41a:	00 0c       	add	r0, r0
     41c:	88 0b       	sbc	r24, r24
     41e:	99 0b       	sbc	r25, r25
     420:	08 d3       	rcall	.+1552   	; 0xa32 <__floatsisf>
     422:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <dis_x>
     426:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <dis_x+0x1>
     42a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <dis_x+0x2>
     42e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <dis_x+0x3>
	dis_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     432:	20 df       	rcall	.-448    	; 0x274 <I2C_Read_Ack>
     434:	c8 2f       	mov	r28, r24
     436:	1e df       	rcall	.-452    	; 0x274 <I2C_Read_Ack>
     438:	6c 2f       	mov	r22, r28
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	76 2f       	mov	r23, r22
     43e:	66 27       	eor	r22, r22
     440:	68 2b       	or	r22, r24
     442:	07 2e       	mov	r0, r23
     444:	00 0c       	add	r0, r0
     446:	88 0b       	sbc	r24, r24
     448:	99 0b       	sbc	r25, r25
     44a:	f3 d2       	rcall	.+1510   	; 0xa32 <__floatsisf>
     44c:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <dis_y>
     450:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <dis_y+0x1>
     454:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <dis_y+0x2>
     458:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <dis_y+0x3>
	dis_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     45c:	0b df       	rcall	.-490    	; 0x274 <I2C_Read_Ack>
     45e:	c8 2f       	mov	r28, r24
     460:	14 df       	rcall	.-472    	; 0x28a <I2C_Read_Nack>
     462:	6c 2f       	mov	r22, r28
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	76 2f       	mov	r23, r22
     468:	66 27       	eor	r22, r22
     46a:	68 2b       	or	r22, r24
     46c:	07 2e       	mov	r0, r23
     46e:	00 0c       	add	r0, r0
     470:	88 0b       	sbc	r24, r24
     472:	99 0b       	sbc	r25, r25
     474:	de d2       	rcall	.+1468   	; 0xa32 <__floatsisf>
     476:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <dis_z>
     47a:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <dis_z+0x1>
     47e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <dis_z+0x2>
     482:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <dis_z+0x3>
	I2C_Stop();
     486:	9b de       	rcall	.-714    	; 0x1be <I2C_Stop>
}
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <main>:
int main(void)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	c2 54       	subi	r28, 0x42	; 66
     496:	d1 09       	sbc	r29, r1
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
		   char buffer[20], float_[10];
		   float Xa,Ya,Za;
		   float Xg=0,Yg=0,Zg=0;
		   float Xd=0,Yd=0,Zd=0;
		   I2C_Init();		
     4a2:	61 de       	rcall	.-830    	; 0x166 <I2C_Init>
		   Gyro_Init();		
     4a4:	fd de       	rcall	.-518    	; 0x2a0 <Gyro_Init>
		   USART_Init(9600);	
     4a6:	60 e8       	ldi	r22, 0x80	; 128
     4a8:	75 e2       	ldi	r23, 0x25	; 37
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	a9 d1       	rcall	.+850    	; 0x802 <USART_Init>
int main(void)
{
		   char buffer[20], float_[10];
		   float Xa,Ya,Za;
		   float Xg=0,Yg=0,Zg=0;
		   float Xd=0,Yd=0,Zd=0;
     4b0:	1f 8e       	std	Y+31, r1	; 0x1f
     4b2:	18 a2       	std	Y+32, r1	; 0x20
     4b4:	19 a2       	std	Y+33, r1	; 0x21
     4b6:	1a a2       	std	Y+34, r1	; 0x22
     4b8:	1b a2       	std	Y+35, r1	; 0x23
     4ba:	1c a2       	std	Y+36, r1	; 0x24
     4bc:	1d a2       	std	Y+37, r1	; 0x25
     4be:	1e a2       	std	Y+38, r1	; 0x26
			   
			   Xg = Gyro_x/16.4;
			   Yg = Gyro_y/16.4;
			   Zg = Gyro_z/16.4; 

			   dtostrf( Xa, 3, 2, float_ );
     4c0:	1e 01       	movw	r2, r28
     4c2:	25 e1       	ldi	r18, 0x15	; 21
     4c4:	22 0e       	add	r2, r18
     4c6:	31 1c       	adc	r3, r1
			   sprintf(buffer, " Ax = %s g\t",float_);
     4c8:	ce 01       	movw	r24, r28
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	7c 01       	movw	r14, r24
			   sprintf(buffer, " Dx = %s g\t",float_);
			   USART_SendString(buffer);
			   

			   dtostrf( Yd, 3, 2, float_ );
			   sprintf(buffer,"Dy = %s g\t",float_);
     4ce:	0f 2e       	mov	r0, r31
     4d0:	f0 e3       	ldi	r31, 0x30	; 48
     4d2:	4f 2e       	mov	r4, r31
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	5f 2e       	mov	r5, r31
     4d8:	f0 2d       	mov	r31, r0
			   USART_SendString(buffer);
			   
			   
			   dtostrf( Zd, 3, 2, float_ );
			   sprintf(buffer,"Dz = %s g\t",float_);
     4da:	0f 2e       	mov	r0, r31
     4dc:	fb e3       	ldi	r31, 0x3B	; 59
     4de:	6f 2e       	mov	r6, r31
     4e0:	f1 e0       	ldi	r31, 0x01	; 1
     4e2:	7f 2e       	mov	r7, r31
     4e4:	f0 2d       	mov	r31, r0
			   USART_SendString(buffer);			   
			  

			   dtostrf( Xg, 3, 2, float_ );
			   sprintf(buffer,"Gx = %s%c/s\t",float_,0xF8);
     4e6:	0f 2e       	mov	r0, r31
     4e8:	f8 ef       	ldi	r31, 0xF8	; 248
     4ea:	9f 2e       	mov	r9, r31
     4ec:	f0 2d       	mov	r31, r0
     4ee:	0f 2e       	mov	r0, r31
     4f0:	f6 e4       	ldi	r31, 0x46	; 70
     4f2:	af 2e       	mov	r10, r31
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	bf 2e       	mov	r11, r31
     4f8:	f0 2d       	mov	r31, r0
			   USART_SendString(buffer);
			  // _delay_ms(500);

			   dtostrf( Yg, 3, 2, float_ );
			   sprintf(buffer,"Gy = %s%c/s\t",float_,0xF8);
     4fa:	0f 2e       	mov	r0, r31
     4fc:	f3 e5       	ldi	r31, 0x53	; 83
     4fe:	cf 2e       	mov	r12, r31
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	df 2e       	mov	r13, r31
     504:	f0 2d       	mov	r31, r0
		   Gyro_Init();		
		   USART_Init(9600);	
		   
		   while(1)
		   {
			   Read_RawValue();
     506:	00 df       	rcall	.-512    	; 0x308 <Read_RawValue>
			
			 
			   Xa = Acc_x/16384.0;
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e8       	ldi	r20, 0x80	; 128
     50e:	58 e3       	ldi	r21, 0x38	; 56
     510:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <Acc_x>
     514:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <Acc_x+0x1>
     518:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Acc_x+0x2>
     51c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <Acc_x+0x3>
     520:	14 d3       	rcall	.+1576   	; 0xb4a <__mulsf3>
     522:	6f a3       	std	Y+39, r22	; 0x27
     524:	78 a7       	std	Y+40, r23	; 0x28
     526:	89 a7       	std	Y+41, r24	; 0x29
     528:	9a a7       	std	Y+42, r25	; 0x2a
			   Ya = Acc_y/16384.0;
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e8       	ldi	r20, 0x80	; 128
     530:	58 e3       	ldi	r21, 0x38	; 56
     532:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <Acc_y>
     536:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <Acc_y+0x1>
     53a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <Acc_y+0x2>
     53e:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <Acc_y+0x3>
     542:	03 d3       	rcall	.+1542   	; 0xb4a <__mulsf3>
     544:	6b a7       	std	Y+43, r22	; 0x2b
     546:	7c a7       	std	Y+44, r23	; 0x2c
     548:	8d a7       	std	Y+45, r24	; 0x2d
     54a:	9e a7       	std	Y+46, r25	; 0x2e
			   Za = Acc_z/16384.0; 
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	58 e3       	ldi	r21, 0x38	; 56
     554:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <__data_end>
     558:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <__data_end+0x1>
     55c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end+0x2>
     560:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <__data_end+0x3>
     564:	f2 d2       	rcall	.+1508   	; 0xb4a <__mulsf3>
     566:	6f a7       	std	Y+47, r22	; 0x2f
     568:	78 ab       	std	Y+48, r23	; 0x30
     56a:	89 ab       	std	Y+49, r24	; 0x31
     56c:	9a ab       	std	Y+50, r25	; 0x32
			   
			   Xd=Xd+(float)(((float)Xa/(float)16384)*9.8*0.05*0.05);
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e8       	ldi	r20, 0x80	; 128
     574:	58 e3       	ldi	r21, 0x38	; 56
     576:	6f a1       	ldd	r22, Y+39	; 0x27
     578:	78 a5       	ldd	r23, Y+40	; 0x28
     57a:	89 a5       	ldd	r24, Y+41	; 0x29
     57c:	9a a5       	ldd	r25, Y+42	; 0x2a
     57e:	e5 d2       	rcall	.+1482   	; 0xb4a <__mulsf3>
     580:	2d ec       	ldi	r18, 0xCD	; 205
     582:	3c ec       	ldi	r19, 0xCC	; 204
     584:	4c e1       	ldi	r20, 0x1C	; 28
     586:	51 e4       	ldi	r21, 0x41	; 65
     588:	e0 d2       	rcall	.+1472   	; 0xb4a <__mulsf3>
     58a:	2d ec       	ldi	r18, 0xCD	; 205
     58c:	3c ec       	ldi	r19, 0xCC	; 204
     58e:	4c e4       	ldi	r20, 0x4C	; 76
     590:	5d e3       	ldi	r21, 0x3D	; 61
     592:	db d2       	rcall	.+1462   	; 0xb4a <__mulsf3>
     594:	2d ec       	ldi	r18, 0xCD	; 205
     596:	3c ec       	ldi	r19, 0xCC	; 204
     598:	4c e4       	ldi	r20, 0x4C	; 76
     59a:	5d e3       	ldi	r21, 0x3D	; 61
     59c:	d6 d2       	rcall	.+1452   	; 0xb4a <__mulsf3>
     59e:	9b 01       	movw	r18, r22
     5a0:	ac 01       	movw	r20, r24
     5a2:	6b a1       	ldd	r22, Y+35	; 0x23
     5a4:	7c a1       	ldd	r23, Y+36	; 0x24
     5a6:	8d a1       	ldd	r24, Y+37	; 0x25
     5a8:	9e a1       	ldd	r25, Y+38	; 0x26
     5aa:	75 d1       	rcall	.+746    	; 0x896 <__addsf3>
     5ac:	6b a3       	std	Y+35, r22	; 0x23
     5ae:	7c a3       	std	Y+36, r23	; 0x24
     5b0:	8d a3       	std	Y+37, r24	; 0x25
     5b2:	9e a3       	std	Y+38, r25	; 0x26
			   Yd=Yd+(float)(((float)Ya/(float)16384)*9.8*0.05*0.05);
     5b4:	20 e0       	ldi	r18, 0x00	; 0
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	40 e8       	ldi	r20, 0x80	; 128
     5ba:	58 e3       	ldi	r21, 0x38	; 56
     5bc:	6b a5       	ldd	r22, Y+43	; 0x2b
     5be:	7c a5       	ldd	r23, Y+44	; 0x2c
     5c0:	8d a5       	ldd	r24, Y+45	; 0x2d
     5c2:	9e a5       	ldd	r25, Y+46	; 0x2e
     5c4:	c2 d2       	rcall	.+1412   	; 0xb4a <__mulsf3>
     5c6:	2d ec       	ldi	r18, 0xCD	; 205
     5c8:	3c ec       	ldi	r19, 0xCC	; 204
     5ca:	4c e1       	ldi	r20, 0x1C	; 28
     5cc:	51 e4       	ldi	r21, 0x41	; 65
     5ce:	bd d2       	rcall	.+1402   	; 0xb4a <__mulsf3>
     5d0:	2d ec       	ldi	r18, 0xCD	; 205
     5d2:	3c ec       	ldi	r19, 0xCC	; 204
     5d4:	4c e4       	ldi	r20, 0x4C	; 76
     5d6:	5d e3       	ldi	r21, 0x3D	; 61
     5d8:	b8 d2       	rcall	.+1392   	; 0xb4a <__mulsf3>
     5da:	2d ec       	ldi	r18, 0xCD	; 205
     5dc:	3c ec       	ldi	r19, 0xCC	; 204
     5de:	4c e4       	ldi	r20, 0x4C	; 76
     5e0:	5d e3       	ldi	r21, 0x3D	; 61
     5e2:	b3 d2       	rcall	.+1382   	; 0xb4a <__mulsf3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     5ea:	78 a1       	ldd	r23, Y+32	; 0x20
     5ec:	89 a1       	ldd	r24, Y+33	; 0x21
     5ee:	9a a1       	ldd	r25, Y+34	; 0x22
     5f0:	52 d1       	rcall	.+676    	; 0x896 <__addsf3>
     5f2:	6f 8f       	std	Y+31, r22	; 0x1f
     5f4:	78 a3       	std	Y+32, r23	; 0x20
     5f6:	89 a3       	std	Y+33, r24	; 0x21
     5f8:	9a a3       	std	Y+34, r25	; 0x22
			   Zd=Yd+(float)(((float)Za/(float)16384)*9.8*0.05*0.05);
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e8       	ldi	r20, 0x80	; 128
     600:	58 e3       	ldi	r21, 0x38	; 56
     602:	6f a5       	ldd	r22, Y+47	; 0x2f
     604:	78 a9       	ldd	r23, Y+48	; 0x30
     606:	89 a9       	ldd	r24, Y+49	; 0x31
     608:	9a a9       	ldd	r25, Y+50	; 0x32
     60a:	9f d2       	rcall	.+1342   	; 0xb4a <__mulsf3>
     60c:	2d ec       	ldi	r18, 0xCD	; 205
     60e:	3c ec       	ldi	r19, 0xCC	; 204
     610:	4c e1       	ldi	r20, 0x1C	; 28
     612:	51 e4       	ldi	r21, 0x41	; 65
     614:	9a d2       	rcall	.+1332   	; 0xb4a <__mulsf3>
     616:	2d ec       	ldi	r18, 0xCD	; 205
     618:	3c ec       	ldi	r19, 0xCC	; 204
     61a:	4c e4       	ldi	r20, 0x4C	; 76
     61c:	5d e3       	ldi	r21, 0x3D	; 61
     61e:	95 d2       	rcall	.+1322   	; 0xb4a <__mulsf3>
     620:	2d ec       	ldi	r18, 0xCD	; 205
     622:	3c ec       	ldi	r19, 0xCC	; 204
     624:	4c e4       	ldi	r20, 0x4C	; 76
     626:	5d e3       	ldi	r21, 0x3D	; 61
     628:	90 d2       	rcall	.+1312   	; 0xb4a <__mulsf3>
     62a:	2f 8d       	ldd	r18, Y+31	; 0x1f
     62c:	38 a1       	ldd	r19, Y+32	; 0x20
     62e:	49 a1       	ldd	r20, Y+33	; 0x21
     630:	5a a1       	ldd	r21, Y+34	; 0x22
     632:	31 d1       	rcall	.+610    	; 0x896 <__addsf3>
     634:	6b ab       	std	Y+51, r22	; 0x33
     636:	7c ab       	std	Y+52, r23	; 0x34
     638:	8d ab       	std	Y+53, r24	; 0x35
     63a:	9e ab       	std	Y+54, r25	; 0x36
			   
			   Xg = Gyro_x/16.4;
     63c:	23 e3       	ldi	r18, 0x33	; 51
     63e:	33 e3       	ldi	r19, 0x33	; 51
     640:	43 e8       	ldi	r20, 0x83	; 131
     642:	51 e4       	ldi	r21, 0x41	; 65
     644:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <Gyro_x>
     648:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <Gyro_x+0x1>
     64c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <Gyro_x+0x2>
     650:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <Gyro_x+0x3>
     654:	84 d1       	rcall	.+776    	; 0x95e <__divsf3>
     656:	6f ab       	std	Y+55, r22	; 0x37
     658:	78 af       	std	Y+56, r23	; 0x38
     65a:	89 af       	std	Y+57, r24	; 0x39
     65c:	9a af       	std	Y+58, r25	; 0x3a
			   Yg = Gyro_y/16.4;
     65e:	23 e3       	ldi	r18, 0x33	; 51
     660:	33 e3       	ldi	r19, 0x33	; 51
     662:	43 e8       	ldi	r20, 0x83	; 131
     664:	51 e4       	ldi	r21, 0x41	; 65
     666:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <Gyro_y>
     66a:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <Gyro_y+0x1>
     66e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <Gyro_y+0x2>
     672:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <Gyro_y+0x3>
     676:	73 d1       	rcall	.+742    	; 0x95e <__divsf3>
     678:	6b af       	std	Y+59, r22	; 0x3b
     67a:	7c af       	std	Y+60, r23	; 0x3c
     67c:	8d af       	std	Y+61, r24	; 0x3d
     67e:	9e af       	std	Y+62, r25	; 0x3e
			   Zg = Gyro_z/16.4; 
     680:	23 e3       	ldi	r18, 0x33	; 51
     682:	33 e3       	ldi	r19, 0x33	; 51
     684:	43 e8       	ldi	r20, 0x83	; 131
     686:	51 e4       	ldi	r21, 0x41	; 65
     688:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <Gyro_z>
     68c:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <Gyro_z+0x1>
     690:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <Gyro_z+0x2>
     694:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <Gyro_z+0x3>
     698:	62 d1       	rcall	.+708    	; 0x95e <__divsf3>
     69a:	23 96       	adiw	r28, 0x03	; 3
     69c:	6c af       	std	Y+60, r22	; 0x3c
     69e:	7d af       	std	Y+61, r23	; 0x3d
     6a0:	8e af       	std	Y+62, r24	; 0x3e
     6a2:	9f af       	std	Y+63, r25	; 0x3f
     6a4:	23 97       	sbiw	r28, 0x03	; 3

			   dtostrf( Xa, 3, 2, float_ );
     6a6:	81 01       	movw	r16, r2
     6a8:	22 e0       	ldi	r18, 0x02	; 2
     6aa:	43 e0       	ldi	r20, 0x03	; 3
     6ac:	6f a1       	ldd	r22, Y+39	; 0x27
     6ae:	78 a5       	ldd	r23, Y+40	; 0x28
     6b0:	89 a5       	ldd	r24, Y+41	; 0x29
     6b2:	9a a5       	ldd	r25, Y+42	; 0x2a
     6b4:	cf d2       	rcall	.+1438   	; 0xc54 <dtostrf>
			   sprintf(buffer, " Ax = %s g\t",float_);
     6b6:	3f 92       	push	r3
     6b8:	2f 92       	push	r2
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	9f 93       	push	r25
     6c0:	8f 93       	push	r24
     6c2:	ff 92       	push	r15
     6c4:	ef 92       	push	r14
     6c6:	e5 d2       	rcall	.+1482   	; 0xc92 <sprintf>
			   USART_SendString(buffer);
     6c8:	c7 01       	movw	r24, r14
     6ca:	d6 d0       	rcall	.+428    	; 0x878 <USART_SendString>
			   

			   dtostrf( Ya, 3, 2, float_ );
     6cc:	22 e0       	ldi	r18, 0x02	; 2
     6ce:	43 e0       	ldi	r20, 0x03	; 3
     6d0:	6b a5       	ldd	r22, Y+43	; 0x2b
     6d2:	7c a5       	ldd	r23, Y+44	; 0x2c
     6d4:	8d a5       	ldd	r24, Y+45	; 0x2d
     6d6:	9e a5       	ldd	r25, Y+46	; 0x2e
     6d8:	bd d2       	rcall	.+1402   	; 0xc54 <dtostrf>
			   sprintf(buffer,"Ay = %s g\t",float_);
     6da:	3f 92       	push	r3
     6dc:	2f 92       	push	r2
     6de:	8c e0       	ldi	r24, 0x0C	; 12
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	ff 92       	push	r15
     6e8:	ef 92       	push	r14
     6ea:	d3 d2       	rcall	.+1446   	; 0xc92 <sprintf>
			   USART_SendString(buffer);
     6ec:	c7 01       	movw	r24, r14
     6ee:	c4 d0       	rcall	.+392    	; 0x878 <USART_SendString>
			   
			   
			   dtostrf( Za, 3, 2, float_ );
     6f0:	22 e0       	ldi	r18, 0x02	; 2
     6f2:	43 e0       	ldi	r20, 0x03	; 3
     6f4:	6f a5       	ldd	r22, Y+47	; 0x2f
     6f6:	78 a9       	ldd	r23, Y+48	; 0x30
     6f8:	89 a9       	ldd	r24, Y+49	; 0x31
     6fa:	9a a9       	ldd	r25, Y+50	; 0x32
     6fc:	ab d2       	rcall	.+1366   	; 0xc54 <dtostrf>
			   sprintf(buffer,"Az = %s g\t\r\n",float_);
     6fe:	3f 92       	push	r3
     700:	2f 92       	push	r2
     702:	87 e1       	ldi	r24, 0x17	; 23
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	9f 93       	push	r25
     708:	8f 93       	push	r24
     70a:	ff 92       	push	r15
     70c:	ef 92       	push	r14
     70e:	c1 d2       	rcall	.+1410   	; 0xc92 <sprintf>
			   USART_SendString(buffer);
     710:	c7 01       	movw	r24, r14
     712:	b2 d0       	rcall	.+356    	; 0x878 <USART_SendString>
			   
			   dtostrf( Xd, 3, 2, float_ );
     714:	22 e0       	ldi	r18, 0x02	; 2
     716:	43 e0       	ldi	r20, 0x03	; 3
     718:	6b a1       	ldd	r22, Y+35	; 0x23
     71a:	7c a1       	ldd	r23, Y+36	; 0x24
     71c:	8d a1       	ldd	r24, Y+37	; 0x25
     71e:	9e a1       	ldd	r25, Y+38	; 0x26
     720:	99 d2       	rcall	.+1330   	; 0xc54 <dtostrf>
			   sprintf(buffer, " Dx = %s g\t",float_);
     722:	3f 92       	push	r3
     724:	2f 92       	push	r2
     726:	84 e2       	ldi	r24, 0x24	; 36
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	9f 93       	push	r25
     72c:	8f 93       	push	r24
     72e:	ff 92       	push	r15
     730:	ef 92       	push	r14
     732:	af d2       	rcall	.+1374   	; 0xc92 <sprintf>
			   USART_SendString(buffer);
     734:	c7 01       	movw	r24, r14
     736:	a0 d0       	rcall	.+320    	; 0x878 <USART_SendString>
			   

			   dtostrf( Yd, 3, 2, float_ );
     738:	22 e0       	ldi	r18, 0x02	; 2
     73a:	43 e0       	ldi	r20, 0x03	; 3
     73c:	6f 8d       	ldd	r22, Y+31	; 0x1f
     73e:	78 a1       	ldd	r23, Y+32	; 0x20
     740:	89 a1       	ldd	r24, Y+33	; 0x21
     742:	9a a1       	ldd	r25, Y+34	; 0x22
     744:	87 d2       	rcall	.+1294   	; 0xc54 <dtostrf>
			   sprintf(buffer,"Dy = %s g\t",float_);
     746:	3f 92       	push	r3
     748:	2f 92       	push	r2
     74a:	5f 92       	push	r5
     74c:	4f 92       	push	r4
     74e:	ff 92       	push	r15
     750:	ef 92       	push	r14
     752:	9f d2       	rcall	.+1342   	; 0xc92 <sprintf>
			   USART_SendString(buffer);
     754:	c7 01       	movw	r24, r14
     756:	90 d0       	rcall	.+288    	; 0x878 <USART_SendString>
			   
			   
			   dtostrf( Zd, 3, 2, float_ );
     758:	22 e0       	ldi	r18, 0x02	; 2
     75a:	43 e0       	ldi	r20, 0x03	; 3
     75c:	6b a9       	ldd	r22, Y+51	; 0x33
     75e:	7c a9       	ldd	r23, Y+52	; 0x34
     760:	8d a9       	ldd	r24, Y+53	; 0x35
     762:	9e a9       	ldd	r25, Y+54	; 0x36
     764:	77 d2       	rcall	.+1262   	; 0xc54 <dtostrf>
			   sprintf(buffer,"Dz = %s g\t",float_);
     766:	3f 92       	push	r3
     768:	2f 92       	push	r2
     76a:	7f 92       	push	r7
     76c:	6f 92       	push	r6
     76e:	ff 92       	push	r15
     770:	ef 92       	push	r14
     772:	8f d2       	rcall	.+1310   	; 0xc92 <sprintf>
			   USART_SendString(buffer);			   
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	c7 01       	movw	r24, r14
     780:	7b d0       	rcall	.+246    	; 0x878 <USART_SendString>
			  

			   dtostrf( Xg, 3, 2, float_ );
     782:	22 e0       	ldi	r18, 0x02	; 2
     784:	43 e0       	ldi	r20, 0x03	; 3
     786:	6f a9       	ldd	r22, Y+55	; 0x37
     788:	78 ad       	ldd	r23, Y+56	; 0x38
     78a:	89 ad       	ldd	r24, Y+57	; 0x39
     78c:	9a ad       	ldd	r25, Y+58	; 0x3a
     78e:	62 d2       	rcall	.+1220   	; 0xc54 <dtostrf>
			   sprintf(buffer,"Gx = %s%c/s\t",float_,0xF8);
     790:	1f 92       	push	r1
     792:	9f 92       	push	r9
     794:	3f 92       	push	r3
     796:	2f 92       	push	r2
     798:	bf 92       	push	r11
     79a:	af 92       	push	r10
     79c:	ff 92       	push	r15
     79e:	ef 92       	push	r14
     7a0:	78 d2       	rcall	.+1264   	; 0xc92 <sprintf>
			   USART_SendString(buffer);
     7a2:	c7 01       	movw	r24, r14
     7a4:	69 d0       	rcall	.+210    	; 0x878 <USART_SendString>
			  // _delay_ms(500);

			   dtostrf( Yg, 3, 2, float_ );
     7a6:	22 e0       	ldi	r18, 0x02	; 2
     7a8:	43 e0       	ldi	r20, 0x03	; 3
     7aa:	6b ad       	ldd	r22, Y+59	; 0x3b
     7ac:	7c ad       	ldd	r23, Y+60	; 0x3c
     7ae:	8d ad       	ldd	r24, Y+61	; 0x3d
     7b0:	9e ad       	ldd	r25, Y+62	; 0x3e
     7b2:	50 d2       	rcall	.+1184   	; 0xc54 <dtostrf>
			   sprintf(buffer,"Gy = %s%c/s\t",float_,0xF8);
     7b4:	1f 92       	push	r1
     7b6:	9f 92       	push	r9
     7b8:	3f 92       	push	r3
     7ba:	2f 92       	push	r2
     7bc:	df 92       	push	r13
     7be:	cf 92       	push	r12
     7c0:	ff 92       	push	r15
     7c2:	ef 92       	push	r14
     7c4:	66 d2       	rcall	.+1228   	; 0xc92 <sprintf>
			   USART_SendString(buffer);
     7c6:	c7 01       	movw	r24, r14
     7c8:	57 d0       	rcall	.+174    	; 0x878 <USART_SendString>
			  // _delay_ms(500);
			   
			   dtostrf( Zg, 3, 2, float_ );
     7ca:	22 e0       	ldi	r18, 0x02	; 2
     7cc:	43 e0       	ldi	r20, 0x03	; 3
     7ce:	23 96       	adiw	r28, 0x03	; 3
     7d0:	6c ad       	ldd	r22, Y+60	; 0x3c
     7d2:	7d ad       	ldd	r23, Y+61	; 0x3d
     7d4:	8e ad       	ldd	r24, Y+62	; 0x3e
     7d6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7d8:	23 97       	sbiw	r28, 0x03	; 3
     7da:	3c d2       	rcall	.+1144   	; 0xc54 <dtostrf>
			   sprintf(buffer,"Gz = %s%c/s\r\n",float_,0xF8);
     7dc:	1f 92       	push	r1
     7de:	9f 92       	push	r9
     7e0:	3f 92       	push	r3
     7e2:	2f 92       	push	r2
     7e4:	80 e6       	ldi	r24, 0x60	; 96
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	ff 92       	push	r15
     7ee:	ef 92       	push	r14
     7f0:	50 d2       	rcall	.+1184   	; 0xc92 <sprintf>
			   USART_SendString(buffer);
     7f2:	c7 01       	movw	r24, r14
     7f4:	41 d0       	rcall	.+130    	; 0x878 <USART_SendString>
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	82 ce       	rjmp	.-764    	; 0x506 <__stack+0x7>

00000802 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));					/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */ 
}
     802:	e1 ec       	ldi	r30, 0xC1	; 193
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	20 81       	ld	r18, Z
     808:	28 61       	ori	r18, 0x18	; 24
     80a:	20 83       	st	Z, r18
     80c:	e2 ec       	ldi	r30, 0xC2	; 194
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	20 81       	ld	r18, Z
     812:	26 60       	ori	r18, 0x06	; 6
     814:	20 83       	st	Z, r18
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	aa 1f       	adc	r26, r26
     820:	bb 1f       	adc	r27, r27
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	aa 1f       	adc	r26, r26
     828:	bb 1f       	adc	r27, r27
     82a:	9c 01       	movw	r18, r24
     82c:	ad 01       	movw	r20, r26
     82e:	22 0f       	add	r18, r18
     830:	33 1f       	adc	r19, r19
     832:	44 1f       	adc	r20, r20
     834:	55 1f       	adc	r21, r21
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	44 1f       	adc	r20, r20
     83c:	55 1f       	adc	r21, r21
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	72 e1       	ldi	r23, 0x12	; 18
     842:	8a e7       	ldi	r24, 0x7A	; 122
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	e4 d1       	rcall	.+968    	; 0xc10 <__udivmodsi4>
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	82 0f       	add	r24, r18
     84c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     850:	da 01       	movw	r26, r20
     852:	c9 01       	movw	r24, r18
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	a1 09       	sbc	r26, r1
     858:	b1 09       	sbc	r27, r1
     85a:	89 2f       	mov	r24, r25
     85c:	9a 2f       	mov	r25, r26
     85e:	ab 2f       	mov	r26, r27
     860:	bb 27       	eor	r27, r27
     862:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     866:	08 95       	ret

00000868 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;										/* Write data to be transmitting in UDR */
     868:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
     86c:	e0 ec       	ldi	r30, 0xC0	; 192
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	85 ff       	sbrs	r24, 5
     874:	fd cf       	rjmp	.-6      	; 0x870 <USART_TxChar+0x8>
}
     876:	08 95       	ret

00000878 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
     87e:	88 81       	ld	r24, Y
     880:	88 23       	and	r24, r24
     882:	29 f0       	breq	.+10     	; 0x88e <USART_SendString+0x16>
     884:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     886:	f0 df       	rcall	.-32     	; 0x868 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     888:	89 91       	ld	r24, Y+
     88a:	81 11       	cpse	r24, r1
     88c:	fc cf       	rjmp	.-8      	; 0x886 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <__subsf3>:
     894:	50 58       	subi	r21, 0x80	; 128

00000896 <__addsf3>:
     896:	bb 27       	eor	r27, r27
     898:	aa 27       	eor	r26, r26
     89a:	0e d0       	rcall	.+28     	; 0x8b8 <__addsf3x>
     89c:	1c c1       	rjmp	.+568    	; 0xad6 <__fp_round>
     89e:	0d d1       	rcall	.+538    	; 0xaba <__fp_pscA>
     8a0:	30 f0       	brcs	.+12     	; 0x8ae <__addsf3+0x18>
     8a2:	12 d1       	rcall	.+548    	; 0xac8 <__fp_pscB>
     8a4:	20 f0       	brcs	.+8      	; 0x8ae <__addsf3+0x18>
     8a6:	31 f4       	brne	.+12     	; 0x8b4 <__addsf3+0x1e>
     8a8:	9f 3f       	cpi	r25, 0xFF	; 255
     8aa:	11 f4       	brne	.+4      	; 0x8b0 <__addsf3+0x1a>
     8ac:	1e f4       	brtc	.+6      	; 0x8b4 <__addsf3+0x1e>
     8ae:	02 c1       	rjmp	.+516    	; 0xab4 <__fp_nan>
     8b0:	0e f4       	brtc	.+2      	; 0x8b4 <__addsf3+0x1e>
     8b2:	e0 95       	com	r30
     8b4:	e7 fb       	bst	r30, 7
     8b6:	f8 c0       	rjmp	.+496    	; 0xaa8 <__fp_inf>

000008b8 <__addsf3x>:
     8b8:	e9 2f       	mov	r30, r25
     8ba:	1e d1       	rcall	.+572    	; 0xaf8 <__fp_split3>
     8bc:	80 f3       	brcs	.-32     	; 0x89e <__addsf3+0x8>
     8be:	ba 17       	cp	r27, r26
     8c0:	62 07       	cpc	r22, r18
     8c2:	73 07       	cpc	r23, r19
     8c4:	84 07       	cpc	r24, r20
     8c6:	95 07       	cpc	r25, r21
     8c8:	18 f0       	brcs	.+6      	; 0x8d0 <__addsf3x+0x18>
     8ca:	71 f4       	brne	.+28     	; 0x8e8 <__addsf3x+0x30>
     8cc:	9e f5       	brtc	.+102    	; 0x934 <__addsf3x+0x7c>
     8ce:	36 c1       	rjmp	.+620    	; 0xb3c <__fp_zero>
     8d0:	0e f4       	brtc	.+2      	; 0x8d4 <__addsf3x+0x1c>
     8d2:	e0 95       	com	r30
     8d4:	0b 2e       	mov	r0, r27
     8d6:	ba 2f       	mov	r27, r26
     8d8:	a0 2d       	mov	r26, r0
     8da:	0b 01       	movw	r0, r22
     8dc:	b9 01       	movw	r22, r18
     8de:	90 01       	movw	r18, r0
     8e0:	0c 01       	movw	r0, r24
     8e2:	ca 01       	movw	r24, r20
     8e4:	a0 01       	movw	r20, r0
     8e6:	11 24       	eor	r1, r1
     8e8:	ff 27       	eor	r31, r31
     8ea:	59 1b       	sub	r21, r25
     8ec:	99 f0       	breq	.+38     	; 0x914 <__addsf3x+0x5c>
     8ee:	59 3f       	cpi	r21, 0xF9	; 249
     8f0:	50 f4       	brcc	.+20     	; 0x906 <__addsf3x+0x4e>
     8f2:	50 3e       	cpi	r21, 0xE0	; 224
     8f4:	68 f1       	brcs	.+90     	; 0x950 <__addsf3x+0x98>
     8f6:	1a 16       	cp	r1, r26
     8f8:	f0 40       	sbci	r31, 0x00	; 0
     8fa:	a2 2f       	mov	r26, r18
     8fc:	23 2f       	mov	r18, r19
     8fe:	34 2f       	mov	r19, r20
     900:	44 27       	eor	r20, r20
     902:	58 5f       	subi	r21, 0xF8	; 248
     904:	f3 cf       	rjmp	.-26     	; 0x8ec <__addsf3x+0x34>
     906:	46 95       	lsr	r20
     908:	37 95       	ror	r19
     90a:	27 95       	ror	r18
     90c:	a7 95       	ror	r26
     90e:	f0 40       	sbci	r31, 0x00	; 0
     910:	53 95       	inc	r21
     912:	c9 f7       	brne	.-14     	; 0x906 <__addsf3x+0x4e>
     914:	7e f4       	brtc	.+30     	; 0x934 <__addsf3x+0x7c>
     916:	1f 16       	cp	r1, r31
     918:	ba 0b       	sbc	r27, r26
     91a:	62 0b       	sbc	r22, r18
     91c:	73 0b       	sbc	r23, r19
     91e:	84 0b       	sbc	r24, r20
     920:	ba f0       	brmi	.+46     	; 0x950 <__addsf3x+0x98>
     922:	91 50       	subi	r25, 0x01	; 1
     924:	a1 f0       	breq	.+40     	; 0x94e <__addsf3x+0x96>
     926:	ff 0f       	add	r31, r31
     928:	bb 1f       	adc	r27, r27
     92a:	66 1f       	adc	r22, r22
     92c:	77 1f       	adc	r23, r23
     92e:	88 1f       	adc	r24, r24
     930:	c2 f7       	brpl	.-16     	; 0x922 <__addsf3x+0x6a>
     932:	0e c0       	rjmp	.+28     	; 0x950 <__addsf3x+0x98>
     934:	ba 0f       	add	r27, r26
     936:	62 1f       	adc	r22, r18
     938:	73 1f       	adc	r23, r19
     93a:	84 1f       	adc	r24, r20
     93c:	48 f4       	brcc	.+18     	; 0x950 <__addsf3x+0x98>
     93e:	87 95       	ror	r24
     940:	77 95       	ror	r23
     942:	67 95       	ror	r22
     944:	b7 95       	ror	r27
     946:	f7 95       	ror	r31
     948:	9e 3f       	cpi	r25, 0xFE	; 254
     94a:	08 f0       	brcs	.+2      	; 0x94e <__addsf3x+0x96>
     94c:	b3 cf       	rjmp	.-154    	; 0x8b4 <__addsf3+0x1e>
     94e:	93 95       	inc	r25
     950:	88 0f       	add	r24, r24
     952:	08 f0       	brcs	.+2      	; 0x956 <__addsf3x+0x9e>
     954:	99 27       	eor	r25, r25
     956:	ee 0f       	add	r30, r30
     958:	97 95       	ror	r25
     95a:	87 95       	ror	r24
     95c:	08 95       	ret

0000095e <__divsf3>:
     95e:	0c d0       	rcall	.+24     	; 0x978 <__divsf3x>
     960:	ba c0       	rjmp	.+372    	; 0xad6 <__fp_round>
     962:	b2 d0       	rcall	.+356    	; 0xac8 <__fp_pscB>
     964:	40 f0       	brcs	.+16     	; 0x976 <__divsf3+0x18>
     966:	a9 d0       	rcall	.+338    	; 0xaba <__fp_pscA>
     968:	30 f0       	brcs	.+12     	; 0x976 <__divsf3+0x18>
     96a:	21 f4       	brne	.+8      	; 0x974 <__divsf3+0x16>
     96c:	5f 3f       	cpi	r21, 0xFF	; 255
     96e:	19 f0       	breq	.+6      	; 0x976 <__divsf3+0x18>
     970:	9b c0       	rjmp	.+310    	; 0xaa8 <__fp_inf>
     972:	51 11       	cpse	r21, r1
     974:	e4 c0       	rjmp	.+456    	; 0xb3e <__fp_szero>
     976:	9e c0       	rjmp	.+316    	; 0xab4 <__fp_nan>

00000978 <__divsf3x>:
     978:	bf d0       	rcall	.+382    	; 0xaf8 <__fp_split3>
     97a:	98 f3       	brcs	.-26     	; 0x962 <__divsf3+0x4>

0000097c <__divsf3_pse>:
     97c:	99 23       	and	r25, r25
     97e:	c9 f3       	breq	.-14     	; 0x972 <__divsf3+0x14>
     980:	55 23       	and	r21, r21
     982:	b1 f3       	breq	.-20     	; 0x970 <__divsf3+0x12>
     984:	95 1b       	sub	r25, r21
     986:	55 0b       	sbc	r21, r21
     988:	bb 27       	eor	r27, r27
     98a:	aa 27       	eor	r26, r26
     98c:	62 17       	cp	r22, r18
     98e:	73 07       	cpc	r23, r19
     990:	84 07       	cpc	r24, r20
     992:	38 f0       	brcs	.+14     	; 0x9a2 <__divsf3_pse+0x26>
     994:	9f 5f       	subi	r25, 0xFF	; 255
     996:	5f 4f       	sbci	r21, 0xFF	; 255
     998:	22 0f       	add	r18, r18
     99a:	33 1f       	adc	r19, r19
     99c:	44 1f       	adc	r20, r20
     99e:	aa 1f       	adc	r26, r26
     9a0:	a9 f3       	breq	.-22     	; 0x98c <__divsf3_pse+0x10>
     9a2:	33 d0       	rcall	.+102    	; 0xa0a <__divsf3_pse+0x8e>
     9a4:	0e 2e       	mov	r0, r30
     9a6:	3a f0       	brmi	.+14     	; 0x9b6 <__divsf3_pse+0x3a>
     9a8:	e0 e8       	ldi	r30, 0x80	; 128
     9aa:	30 d0       	rcall	.+96     	; 0xa0c <__divsf3_pse+0x90>
     9ac:	91 50       	subi	r25, 0x01	; 1
     9ae:	50 40       	sbci	r21, 0x00	; 0
     9b0:	e6 95       	lsr	r30
     9b2:	00 1c       	adc	r0, r0
     9b4:	ca f7       	brpl	.-14     	; 0x9a8 <__divsf3_pse+0x2c>
     9b6:	29 d0       	rcall	.+82     	; 0xa0a <__divsf3_pse+0x8e>
     9b8:	fe 2f       	mov	r31, r30
     9ba:	27 d0       	rcall	.+78     	; 0xa0a <__divsf3_pse+0x8e>
     9bc:	66 0f       	add	r22, r22
     9be:	77 1f       	adc	r23, r23
     9c0:	88 1f       	adc	r24, r24
     9c2:	bb 1f       	adc	r27, r27
     9c4:	26 17       	cp	r18, r22
     9c6:	37 07       	cpc	r19, r23
     9c8:	48 07       	cpc	r20, r24
     9ca:	ab 07       	cpc	r26, r27
     9cc:	b0 e8       	ldi	r27, 0x80	; 128
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <__divsf3_pse+0x56>
     9d0:	bb 0b       	sbc	r27, r27
     9d2:	80 2d       	mov	r24, r0
     9d4:	bf 01       	movw	r22, r30
     9d6:	ff 27       	eor	r31, r31
     9d8:	93 58       	subi	r25, 0x83	; 131
     9da:	5f 4f       	sbci	r21, 0xFF	; 255
     9dc:	2a f0       	brmi	.+10     	; 0x9e8 <__divsf3_pse+0x6c>
     9de:	9e 3f       	cpi	r25, 0xFE	; 254
     9e0:	51 05       	cpc	r21, r1
     9e2:	68 f0       	brcs	.+26     	; 0x9fe <__divsf3_pse+0x82>
     9e4:	61 c0       	rjmp	.+194    	; 0xaa8 <__fp_inf>
     9e6:	ab c0       	rjmp	.+342    	; 0xb3e <__fp_szero>
     9e8:	5f 3f       	cpi	r21, 0xFF	; 255
     9ea:	ec f3       	brlt	.-6      	; 0x9e6 <__divsf3_pse+0x6a>
     9ec:	98 3e       	cpi	r25, 0xE8	; 232
     9ee:	dc f3       	brlt	.-10     	; 0x9e6 <__divsf3_pse+0x6a>
     9f0:	86 95       	lsr	r24
     9f2:	77 95       	ror	r23
     9f4:	67 95       	ror	r22
     9f6:	b7 95       	ror	r27
     9f8:	f7 95       	ror	r31
     9fa:	9f 5f       	subi	r25, 0xFF	; 255
     9fc:	c9 f7       	brne	.-14     	; 0x9f0 <__divsf3_pse+0x74>
     9fe:	88 0f       	add	r24, r24
     a00:	91 1d       	adc	r25, r1
     a02:	96 95       	lsr	r25
     a04:	87 95       	ror	r24
     a06:	97 f9       	bld	r25, 7
     a08:	08 95       	ret
     a0a:	e1 e0       	ldi	r30, 0x01	; 1
     a0c:	66 0f       	add	r22, r22
     a0e:	77 1f       	adc	r23, r23
     a10:	88 1f       	adc	r24, r24
     a12:	bb 1f       	adc	r27, r27
     a14:	62 17       	cp	r22, r18
     a16:	73 07       	cpc	r23, r19
     a18:	84 07       	cpc	r24, r20
     a1a:	ba 07       	cpc	r27, r26
     a1c:	20 f0       	brcs	.+8      	; 0xa26 <__divsf3_pse+0xaa>
     a1e:	62 1b       	sub	r22, r18
     a20:	73 0b       	sbc	r23, r19
     a22:	84 0b       	sbc	r24, r20
     a24:	ba 0b       	sbc	r27, r26
     a26:	ee 1f       	adc	r30, r30
     a28:	88 f7       	brcc	.-30     	; 0xa0c <__divsf3_pse+0x90>
     a2a:	e0 95       	com	r30
     a2c:	08 95       	ret

00000a2e <__floatunsisf>:
     a2e:	e8 94       	clt
     a30:	09 c0       	rjmp	.+18     	; 0xa44 <__floatsisf+0x12>

00000a32 <__floatsisf>:
     a32:	97 fb       	bst	r25, 7
     a34:	3e f4       	brtc	.+14     	; 0xa44 <__floatsisf+0x12>
     a36:	90 95       	com	r25
     a38:	80 95       	com	r24
     a3a:	70 95       	com	r23
     a3c:	61 95       	neg	r22
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	8f 4f       	sbci	r24, 0xFF	; 255
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	99 23       	and	r25, r25
     a46:	a9 f0       	breq	.+42     	; 0xa72 <__floatsisf+0x40>
     a48:	f9 2f       	mov	r31, r25
     a4a:	96 e9       	ldi	r25, 0x96	; 150
     a4c:	bb 27       	eor	r27, r27
     a4e:	93 95       	inc	r25
     a50:	f6 95       	lsr	r31
     a52:	87 95       	ror	r24
     a54:	77 95       	ror	r23
     a56:	67 95       	ror	r22
     a58:	b7 95       	ror	r27
     a5a:	f1 11       	cpse	r31, r1
     a5c:	f8 cf       	rjmp	.-16     	; 0xa4e <__floatsisf+0x1c>
     a5e:	fa f4       	brpl	.+62     	; 0xa9e <__floatsisf+0x6c>
     a60:	bb 0f       	add	r27, r27
     a62:	11 f4       	brne	.+4      	; 0xa68 <__floatsisf+0x36>
     a64:	60 ff       	sbrs	r22, 0
     a66:	1b c0       	rjmp	.+54     	; 0xa9e <__floatsisf+0x6c>
     a68:	6f 5f       	subi	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	8f 4f       	sbci	r24, 0xFF	; 255
     a6e:	9f 4f       	sbci	r25, 0xFF	; 255
     a70:	16 c0       	rjmp	.+44     	; 0xa9e <__floatsisf+0x6c>
     a72:	88 23       	and	r24, r24
     a74:	11 f0       	breq	.+4      	; 0xa7a <__floatsisf+0x48>
     a76:	96 e9       	ldi	r25, 0x96	; 150
     a78:	11 c0       	rjmp	.+34     	; 0xa9c <__floatsisf+0x6a>
     a7a:	77 23       	and	r23, r23
     a7c:	21 f0       	breq	.+8      	; 0xa86 <__floatsisf+0x54>
     a7e:	9e e8       	ldi	r25, 0x8E	; 142
     a80:	87 2f       	mov	r24, r23
     a82:	76 2f       	mov	r23, r22
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__floatsisf+0x5e>
     a86:	66 23       	and	r22, r22
     a88:	71 f0       	breq	.+28     	; 0xaa6 <__floatsisf+0x74>
     a8a:	96 e8       	ldi	r25, 0x86	; 134
     a8c:	86 2f       	mov	r24, r22
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	2a f0       	brmi	.+10     	; 0xa9e <__floatsisf+0x6c>
     a94:	9a 95       	dec	r25
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	88 1f       	adc	r24, r24
     a9c:	da f7       	brpl	.-10     	; 0xa94 <__floatsisf+0x62>
     a9e:	88 0f       	add	r24, r24
     aa0:	96 95       	lsr	r25
     aa2:	87 95       	ror	r24
     aa4:	97 f9       	bld	r25, 7
     aa6:	08 95       	ret

00000aa8 <__fp_inf>:
     aa8:	97 f9       	bld	r25, 7
     aaa:	9f 67       	ori	r25, 0x7F	; 127
     aac:	80 e8       	ldi	r24, 0x80	; 128
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	08 95       	ret

00000ab4 <__fp_nan>:
     ab4:	9f ef       	ldi	r25, 0xFF	; 255
     ab6:	80 ec       	ldi	r24, 0xC0	; 192
     ab8:	08 95       	ret

00000aba <__fp_pscA>:
     aba:	00 24       	eor	r0, r0
     abc:	0a 94       	dec	r0
     abe:	16 16       	cp	r1, r22
     ac0:	17 06       	cpc	r1, r23
     ac2:	18 06       	cpc	r1, r24
     ac4:	09 06       	cpc	r0, r25
     ac6:	08 95       	ret

00000ac8 <__fp_pscB>:
     ac8:	00 24       	eor	r0, r0
     aca:	0a 94       	dec	r0
     acc:	12 16       	cp	r1, r18
     ace:	13 06       	cpc	r1, r19
     ad0:	14 06       	cpc	r1, r20
     ad2:	05 06       	cpc	r0, r21
     ad4:	08 95       	ret

00000ad6 <__fp_round>:
     ad6:	09 2e       	mov	r0, r25
     ad8:	03 94       	inc	r0
     ada:	00 0c       	add	r0, r0
     adc:	11 f4       	brne	.+4      	; 0xae2 <__fp_round+0xc>
     ade:	88 23       	and	r24, r24
     ae0:	52 f0       	brmi	.+20     	; 0xaf6 <__fp_round+0x20>
     ae2:	bb 0f       	add	r27, r27
     ae4:	40 f4       	brcc	.+16     	; 0xaf6 <__fp_round+0x20>
     ae6:	bf 2b       	or	r27, r31
     ae8:	11 f4       	brne	.+4      	; 0xaee <__fp_round+0x18>
     aea:	60 ff       	sbrs	r22, 0
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <__fp_round+0x20>
     aee:	6f 5f       	subi	r22, 0xFF	; 255
     af0:	7f 4f       	sbci	r23, 0xFF	; 255
     af2:	8f 4f       	sbci	r24, 0xFF	; 255
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	08 95       	ret

00000af8 <__fp_split3>:
     af8:	57 fd       	sbrc	r21, 7
     afa:	90 58       	subi	r25, 0x80	; 128
     afc:	44 0f       	add	r20, r20
     afe:	55 1f       	adc	r21, r21
     b00:	59 f0       	breq	.+22     	; 0xb18 <__fp_splitA+0x10>
     b02:	5f 3f       	cpi	r21, 0xFF	; 255
     b04:	71 f0       	breq	.+28     	; 0xb22 <__fp_splitA+0x1a>
     b06:	47 95       	ror	r20

00000b08 <__fp_splitA>:
     b08:	88 0f       	add	r24, r24
     b0a:	97 fb       	bst	r25, 7
     b0c:	99 1f       	adc	r25, r25
     b0e:	61 f0       	breq	.+24     	; 0xb28 <__fp_splitA+0x20>
     b10:	9f 3f       	cpi	r25, 0xFF	; 255
     b12:	79 f0       	breq	.+30     	; 0xb32 <__fp_splitA+0x2a>
     b14:	87 95       	ror	r24
     b16:	08 95       	ret
     b18:	12 16       	cp	r1, r18
     b1a:	13 06       	cpc	r1, r19
     b1c:	14 06       	cpc	r1, r20
     b1e:	55 1f       	adc	r21, r21
     b20:	f2 cf       	rjmp	.-28     	; 0xb06 <__fp_split3+0xe>
     b22:	46 95       	lsr	r20
     b24:	f1 df       	rcall	.-30     	; 0xb08 <__fp_splitA>
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <__fp_splitA+0x30>
     b28:	16 16       	cp	r1, r22
     b2a:	17 06       	cpc	r1, r23
     b2c:	18 06       	cpc	r1, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	f1 cf       	rjmp	.-30     	; 0xb14 <__fp_splitA+0xc>
     b32:	86 95       	lsr	r24
     b34:	71 05       	cpc	r23, r1
     b36:	61 05       	cpc	r22, r1
     b38:	08 94       	sec
     b3a:	08 95       	ret

00000b3c <__fp_zero>:
     b3c:	e8 94       	clt

00000b3e <__fp_szero>:
     b3e:	bb 27       	eor	r27, r27
     b40:	66 27       	eor	r22, r22
     b42:	77 27       	eor	r23, r23
     b44:	cb 01       	movw	r24, r22
     b46:	97 f9       	bld	r25, 7
     b48:	08 95       	ret

00000b4a <__mulsf3>:
     b4a:	0b d0       	rcall	.+22     	; 0xb62 <__mulsf3x>
     b4c:	c4 cf       	rjmp	.-120    	; 0xad6 <__fp_round>
     b4e:	b5 df       	rcall	.-150    	; 0xaba <__fp_pscA>
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__mulsf3+0x12>
     b52:	ba df       	rcall	.-140    	; 0xac8 <__fp_pscB>
     b54:	18 f0       	brcs	.+6      	; 0xb5c <__mulsf3+0x12>
     b56:	95 23       	and	r25, r21
     b58:	09 f0       	breq	.+2      	; 0xb5c <__mulsf3+0x12>
     b5a:	a6 cf       	rjmp	.-180    	; 0xaa8 <__fp_inf>
     b5c:	ab cf       	rjmp	.-170    	; 0xab4 <__fp_nan>
     b5e:	11 24       	eor	r1, r1
     b60:	ee cf       	rjmp	.-36     	; 0xb3e <__fp_szero>

00000b62 <__mulsf3x>:
     b62:	ca df       	rcall	.-108    	; 0xaf8 <__fp_split3>
     b64:	a0 f3       	brcs	.-24     	; 0xb4e <__mulsf3+0x4>

00000b66 <__mulsf3_pse>:
     b66:	95 9f       	mul	r25, r21
     b68:	d1 f3       	breq	.-12     	; 0xb5e <__mulsf3+0x14>
     b6a:	95 0f       	add	r25, r21
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	55 1f       	adc	r21, r21
     b70:	62 9f       	mul	r22, r18
     b72:	f0 01       	movw	r30, r0
     b74:	72 9f       	mul	r23, r18
     b76:	bb 27       	eor	r27, r27
     b78:	f0 0d       	add	r31, r0
     b7a:	b1 1d       	adc	r27, r1
     b7c:	63 9f       	mul	r22, r19
     b7e:	aa 27       	eor	r26, r26
     b80:	f0 0d       	add	r31, r0
     b82:	b1 1d       	adc	r27, r1
     b84:	aa 1f       	adc	r26, r26
     b86:	64 9f       	mul	r22, r20
     b88:	66 27       	eor	r22, r22
     b8a:	b0 0d       	add	r27, r0
     b8c:	a1 1d       	adc	r26, r1
     b8e:	66 1f       	adc	r22, r22
     b90:	82 9f       	mul	r24, r18
     b92:	22 27       	eor	r18, r18
     b94:	b0 0d       	add	r27, r0
     b96:	a1 1d       	adc	r26, r1
     b98:	62 1f       	adc	r22, r18
     b9a:	73 9f       	mul	r23, r19
     b9c:	b0 0d       	add	r27, r0
     b9e:	a1 1d       	adc	r26, r1
     ba0:	62 1f       	adc	r22, r18
     ba2:	83 9f       	mul	r24, r19
     ba4:	a0 0d       	add	r26, r0
     ba6:	61 1d       	adc	r22, r1
     ba8:	22 1f       	adc	r18, r18
     baa:	74 9f       	mul	r23, r20
     bac:	33 27       	eor	r19, r19
     bae:	a0 0d       	add	r26, r0
     bb0:	61 1d       	adc	r22, r1
     bb2:	23 1f       	adc	r18, r19
     bb4:	84 9f       	mul	r24, r20
     bb6:	60 0d       	add	r22, r0
     bb8:	21 1d       	adc	r18, r1
     bba:	82 2f       	mov	r24, r18
     bbc:	76 2f       	mov	r23, r22
     bbe:	6a 2f       	mov	r22, r26
     bc0:	11 24       	eor	r1, r1
     bc2:	9f 57       	subi	r25, 0x7F	; 127
     bc4:	50 40       	sbci	r21, 0x00	; 0
     bc6:	8a f0       	brmi	.+34     	; 0xbea <__mulsf3_pse+0x84>
     bc8:	e1 f0       	breq	.+56     	; 0xc02 <__mulsf3_pse+0x9c>
     bca:	88 23       	and	r24, r24
     bcc:	4a f0       	brmi	.+18     	; 0xbe0 <__mulsf3_pse+0x7a>
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	bb 1f       	adc	r27, r27
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	88 1f       	adc	r24, r24
     bda:	91 50       	subi	r25, 0x01	; 1
     bdc:	50 40       	sbci	r21, 0x00	; 0
     bde:	a9 f7       	brne	.-22     	; 0xbca <__mulsf3_pse+0x64>
     be0:	9e 3f       	cpi	r25, 0xFE	; 254
     be2:	51 05       	cpc	r21, r1
     be4:	70 f0       	brcs	.+28     	; 0xc02 <__mulsf3_pse+0x9c>
     be6:	60 cf       	rjmp	.-320    	; 0xaa8 <__fp_inf>
     be8:	aa cf       	rjmp	.-172    	; 0xb3e <__fp_szero>
     bea:	5f 3f       	cpi	r21, 0xFF	; 255
     bec:	ec f3       	brlt	.-6      	; 0xbe8 <__mulsf3_pse+0x82>
     bee:	98 3e       	cpi	r25, 0xE8	; 232
     bf0:	dc f3       	brlt	.-10     	; 0xbe8 <__mulsf3_pse+0x82>
     bf2:	86 95       	lsr	r24
     bf4:	77 95       	ror	r23
     bf6:	67 95       	ror	r22
     bf8:	b7 95       	ror	r27
     bfa:	f7 95       	ror	r31
     bfc:	e7 95       	ror	r30
     bfe:	9f 5f       	subi	r25, 0xFF	; 255
     c00:	c1 f7       	brne	.-16     	; 0xbf2 <__mulsf3_pse+0x8c>
     c02:	fe 2b       	or	r31, r30
     c04:	88 0f       	add	r24, r24
     c06:	91 1d       	adc	r25, r1
     c08:	96 95       	lsr	r25
     c0a:	87 95       	ror	r24
     c0c:	97 f9       	bld	r25, 7
     c0e:	08 95       	ret

00000c10 <__udivmodsi4>:
     c10:	a1 e2       	ldi	r26, 0x21	; 33
     c12:	1a 2e       	mov	r1, r26
     c14:	aa 1b       	sub	r26, r26
     c16:	bb 1b       	sub	r27, r27
     c18:	fd 01       	movw	r30, r26
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__udivmodsi4_ep>

00000c1c <__udivmodsi4_loop>:
     c1c:	aa 1f       	adc	r26, r26
     c1e:	bb 1f       	adc	r27, r27
     c20:	ee 1f       	adc	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	a2 17       	cp	r26, r18
     c26:	b3 07       	cpc	r27, r19
     c28:	e4 07       	cpc	r30, r20
     c2a:	f5 07       	cpc	r31, r21
     c2c:	20 f0       	brcs	.+8      	; 0xc36 <__udivmodsi4_ep>
     c2e:	a2 1b       	sub	r26, r18
     c30:	b3 0b       	sbc	r27, r19
     c32:	e4 0b       	sbc	r30, r20
     c34:	f5 0b       	sbc	r31, r21

00000c36 <__udivmodsi4_ep>:
     c36:	66 1f       	adc	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	88 1f       	adc	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	1a 94       	dec	r1
     c40:	69 f7       	brne	.-38     	; 0xc1c <__udivmodsi4_loop>
     c42:	60 95       	com	r22
     c44:	70 95       	com	r23
     c46:	80 95       	com	r24
     c48:	90 95       	com	r25
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	bd 01       	movw	r22, r26
     c50:	cf 01       	movw	r24, r30
     c52:	08 95       	ret

00000c54 <dtostrf>:
     c54:	ef 92       	push	r14
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	e8 01       	movw	r28, r16
     c60:	47 fd       	sbrc	r20, 7
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <dtostrf+0x14>
     c64:	34 e0       	ldi	r19, 0x04	; 4
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <dtostrf+0x16>
     c68:	34 e1       	ldi	r19, 0x14	; 20
     c6a:	04 2e       	mov	r0, r20
     c6c:	00 0c       	add	r0, r0
     c6e:	55 0b       	sbc	r21, r21
     c70:	57 ff       	sbrs	r21, 7
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <dtostrf+0x26>
     c74:	51 95       	neg	r21
     c76:	41 95       	neg	r20
     c78:	51 09       	sbc	r21, r1
     c7a:	e3 2e       	mov	r14, r19
     c7c:	02 2f       	mov	r16, r18
     c7e:	24 2f       	mov	r18, r20
     c80:	ae 01       	movw	r20, r28
     c82:	f8 d1       	rcall	.+1008   	; 0x1074 <dtoa_prf>
     c84:	ce 01       	movw	r24, r28
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ef 90       	pop	r14
     c90:	08 95       	ret

00000c92 <sprintf>:
     c92:	ae e0       	ldi	r26, 0x0E	; 14
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ee e4       	ldi	r30, 0x4E	; 78
     c98:	f6 e0       	ldi	r31, 0x06	; 6
     c9a:	d9 c4       	rjmp	.+2482   	; 0x164e <__prologue_saves__+0x1c>
     c9c:	0d 89       	ldd	r16, Y+21	; 0x15
     c9e:	1e 89       	ldd	r17, Y+22	; 0x16
     ca0:	86 e0       	ldi	r24, 0x06	; 6
     ca2:	8c 83       	std	Y+4, r24	; 0x04
     ca4:	1a 83       	std	Y+2, r17	; 0x02
     ca6:	09 83       	std	Y+1, r16	; 0x01
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	9f e7       	ldi	r25, 0x7F	; 127
     cac:	9e 83       	std	Y+6, r25	; 0x06
     cae:	8d 83       	std	Y+5, r24	; 0x05
     cb0:	ae 01       	movw	r20, r28
     cb2:	47 5e       	subi	r20, 0xE7	; 231
     cb4:	5f 4f       	sbci	r21, 0xFF	; 255
     cb6:	6f 89       	ldd	r22, Y+23	; 0x17
     cb8:	78 8d       	ldd	r23, Y+24	; 0x18
     cba:	ce 01       	movw	r24, r28
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	08 d0       	rcall	.+16     	; 0xcd0 <vfprintf>
     cc0:	ef 81       	ldd	r30, Y+7	; 0x07
     cc2:	f8 85       	ldd	r31, Y+8	; 0x08
     cc4:	e0 0f       	add	r30, r16
     cc6:	f1 1f       	adc	r31, r17
     cc8:	10 82       	st	Z, r1
     cca:	2e 96       	adiw	r28, 0x0e	; 14
     ccc:	e4 e0       	ldi	r30, 0x04	; 4
     cce:	db c4       	rjmp	.+2486   	; 0x1686 <__epilogue_restores__+0x1c>

00000cd0 <vfprintf>:
     cd0:	ab e0       	ldi	r26, 0x0B	; 11
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ed e6       	ldi	r30, 0x6D	; 109
     cd6:	f6 e0       	ldi	r31, 0x06	; 6
     cd8:	ac c4       	rjmp	.+2392   	; 0x1632 <__prologue_saves__>
     cda:	6c 01       	movw	r12, r24
     cdc:	7b 01       	movw	r14, r22
     cde:	8a 01       	movw	r16, r20
     ce0:	fc 01       	movw	r30, r24
     ce2:	17 82       	std	Z+7, r1	; 0x07
     ce4:	16 82       	std	Z+6, r1	; 0x06
     ce6:	83 81       	ldd	r24, Z+3	; 0x03
     ce8:	81 ff       	sbrs	r24, 1
     cea:	bf c1       	rjmp	.+894    	; 0x106a <vfprintf+0x39a>
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	3c 01       	movw	r6, r24
     cf2:	f6 01       	movw	r30, r12
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	f7 01       	movw	r30, r14
     cf8:	93 fd       	sbrc	r25, 3
     cfa:	85 91       	lpm	r24, Z+
     cfc:	93 ff       	sbrs	r25, 3
     cfe:	81 91       	ld	r24, Z+
     d00:	7f 01       	movw	r14, r30
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <vfprintf+0x38>
     d06:	ad c1       	rjmp	.+858    	; 0x1062 <vfprintf+0x392>
     d08:	85 32       	cpi	r24, 0x25	; 37
     d0a:	39 f4       	brne	.+14     	; 0xd1a <vfprintf+0x4a>
     d0c:	93 fd       	sbrc	r25, 3
     d0e:	85 91       	lpm	r24, Z+
     d10:	93 ff       	sbrs	r25, 3
     d12:	81 91       	ld	r24, Z+
     d14:	7f 01       	movw	r14, r30
     d16:	85 32       	cpi	r24, 0x25	; 37
     d18:	21 f4       	brne	.+8      	; 0xd22 <vfprintf+0x52>
     d1a:	b6 01       	movw	r22, r12
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	ef d3       	rcall	.+2014   	; 0x14fe <fputc>
     d20:	e8 cf       	rjmp	.-48     	; 0xcf2 <vfprintf+0x22>
     d22:	91 2c       	mov	r9, r1
     d24:	21 2c       	mov	r2, r1
     d26:	31 2c       	mov	r3, r1
     d28:	ff e1       	ldi	r31, 0x1F	; 31
     d2a:	f3 15       	cp	r31, r3
     d2c:	d8 f0       	brcs	.+54     	; 0xd64 <vfprintf+0x94>
     d2e:	8b 32       	cpi	r24, 0x2B	; 43
     d30:	79 f0       	breq	.+30     	; 0xd50 <vfprintf+0x80>
     d32:	38 f4       	brcc	.+14     	; 0xd42 <vfprintf+0x72>
     d34:	80 32       	cpi	r24, 0x20	; 32
     d36:	79 f0       	breq	.+30     	; 0xd56 <vfprintf+0x86>
     d38:	83 32       	cpi	r24, 0x23	; 35
     d3a:	a1 f4       	brne	.+40     	; 0xd64 <vfprintf+0x94>
     d3c:	23 2d       	mov	r18, r3
     d3e:	20 61       	ori	r18, 0x10	; 16
     d40:	1d c0       	rjmp	.+58     	; 0xd7c <vfprintf+0xac>
     d42:	8d 32       	cpi	r24, 0x2D	; 45
     d44:	61 f0       	breq	.+24     	; 0xd5e <vfprintf+0x8e>
     d46:	80 33       	cpi	r24, 0x30	; 48
     d48:	69 f4       	brne	.+26     	; 0xd64 <vfprintf+0x94>
     d4a:	23 2d       	mov	r18, r3
     d4c:	21 60       	ori	r18, 0x01	; 1
     d4e:	16 c0       	rjmp	.+44     	; 0xd7c <vfprintf+0xac>
     d50:	83 2d       	mov	r24, r3
     d52:	82 60       	ori	r24, 0x02	; 2
     d54:	38 2e       	mov	r3, r24
     d56:	e3 2d       	mov	r30, r3
     d58:	e4 60       	ori	r30, 0x04	; 4
     d5a:	3e 2e       	mov	r3, r30
     d5c:	2a c0       	rjmp	.+84     	; 0xdb2 <vfprintf+0xe2>
     d5e:	f3 2d       	mov	r31, r3
     d60:	f8 60       	ori	r31, 0x08	; 8
     d62:	1d c0       	rjmp	.+58     	; 0xd9e <vfprintf+0xce>
     d64:	37 fc       	sbrc	r3, 7
     d66:	2d c0       	rjmp	.+90     	; 0xdc2 <vfprintf+0xf2>
     d68:	20 ed       	ldi	r18, 0xD0	; 208
     d6a:	28 0f       	add	r18, r24
     d6c:	2a 30       	cpi	r18, 0x0A	; 10
     d6e:	40 f0       	brcs	.+16     	; 0xd80 <vfprintf+0xb0>
     d70:	8e 32       	cpi	r24, 0x2E	; 46
     d72:	b9 f4       	brne	.+46     	; 0xda2 <vfprintf+0xd2>
     d74:	36 fc       	sbrc	r3, 6
     d76:	75 c1       	rjmp	.+746    	; 0x1062 <vfprintf+0x392>
     d78:	23 2d       	mov	r18, r3
     d7a:	20 64       	ori	r18, 0x40	; 64
     d7c:	32 2e       	mov	r3, r18
     d7e:	19 c0       	rjmp	.+50     	; 0xdb2 <vfprintf+0xe2>
     d80:	36 fe       	sbrs	r3, 6
     d82:	06 c0       	rjmp	.+12     	; 0xd90 <vfprintf+0xc0>
     d84:	8a e0       	ldi	r24, 0x0A	; 10
     d86:	98 9e       	mul	r9, r24
     d88:	20 0d       	add	r18, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	92 2e       	mov	r9, r18
     d8e:	11 c0       	rjmp	.+34     	; 0xdb2 <vfprintf+0xe2>
     d90:	ea e0       	ldi	r30, 0x0A	; 10
     d92:	2e 9e       	mul	r2, r30
     d94:	20 0d       	add	r18, r0
     d96:	11 24       	eor	r1, r1
     d98:	22 2e       	mov	r2, r18
     d9a:	f3 2d       	mov	r31, r3
     d9c:	f0 62       	ori	r31, 0x20	; 32
     d9e:	3f 2e       	mov	r3, r31
     da0:	08 c0       	rjmp	.+16     	; 0xdb2 <vfprintf+0xe2>
     da2:	8c 36       	cpi	r24, 0x6C	; 108
     da4:	21 f4       	brne	.+8      	; 0xdae <vfprintf+0xde>
     da6:	83 2d       	mov	r24, r3
     da8:	80 68       	ori	r24, 0x80	; 128
     daa:	38 2e       	mov	r3, r24
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <vfprintf+0xe2>
     dae:	88 36       	cpi	r24, 0x68	; 104
     db0:	41 f4       	brne	.+16     	; 0xdc2 <vfprintf+0xf2>
     db2:	f7 01       	movw	r30, r14
     db4:	93 fd       	sbrc	r25, 3
     db6:	85 91       	lpm	r24, Z+
     db8:	93 ff       	sbrs	r25, 3
     dba:	81 91       	ld	r24, Z+
     dbc:	7f 01       	movw	r14, r30
     dbe:	81 11       	cpse	r24, r1
     dc0:	b3 cf       	rjmp	.-154    	; 0xd28 <vfprintf+0x58>
     dc2:	98 2f       	mov	r25, r24
     dc4:	9f 7d       	andi	r25, 0xDF	; 223
     dc6:	95 54       	subi	r25, 0x45	; 69
     dc8:	93 30       	cpi	r25, 0x03	; 3
     dca:	28 f4       	brcc	.+10     	; 0xdd6 <vfprintf+0x106>
     dcc:	0c 5f       	subi	r16, 0xFC	; 252
     dce:	1f 4f       	sbci	r17, 0xFF	; 255
     dd0:	9f e3       	ldi	r25, 0x3F	; 63
     dd2:	99 83       	std	Y+1, r25	; 0x01
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <vfprintf+0x120>
     dd6:	83 36       	cpi	r24, 0x63	; 99
     dd8:	31 f0       	breq	.+12     	; 0xde6 <vfprintf+0x116>
     dda:	83 37       	cpi	r24, 0x73	; 115
     ddc:	71 f0       	breq	.+28     	; 0xdfa <vfprintf+0x12a>
     dde:	83 35       	cpi	r24, 0x53	; 83
     de0:	09 f0       	breq	.+2      	; 0xde4 <vfprintf+0x114>
     de2:	55 c0       	rjmp	.+170    	; 0xe8e <vfprintf+0x1be>
     de4:	20 c0       	rjmp	.+64     	; 0xe26 <vfprintf+0x156>
     de6:	f8 01       	movw	r30, r16
     de8:	80 81       	ld	r24, Z
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	0e 5f       	subi	r16, 0xFE	; 254
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	88 24       	eor	r8, r8
     df2:	83 94       	inc	r8
     df4:	91 2c       	mov	r9, r1
     df6:	53 01       	movw	r10, r6
     df8:	12 c0       	rjmp	.+36     	; 0xe1e <vfprintf+0x14e>
     dfa:	28 01       	movw	r4, r16
     dfc:	f2 e0       	ldi	r31, 0x02	; 2
     dfe:	4f 0e       	add	r4, r31
     e00:	51 1c       	adc	r5, r1
     e02:	f8 01       	movw	r30, r16
     e04:	a0 80       	ld	r10, Z
     e06:	b1 80       	ldd	r11, Z+1	; 0x01
     e08:	36 fe       	sbrs	r3, 6
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <vfprintf+0x142>
     e0c:	69 2d       	mov	r22, r9
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <vfprintf+0x146>
     e12:	6f ef       	ldi	r22, 0xFF	; 255
     e14:	7f ef       	ldi	r23, 0xFF	; 255
     e16:	c5 01       	movw	r24, r10
     e18:	67 d3       	rcall	.+1742   	; 0x14e8 <strnlen>
     e1a:	4c 01       	movw	r8, r24
     e1c:	82 01       	movw	r16, r4
     e1e:	f3 2d       	mov	r31, r3
     e20:	ff 77       	andi	r31, 0x7F	; 127
     e22:	3f 2e       	mov	r3, r31
     e24:	15 c0       	rjmp	.+42     	; 0xe50 <vfprintf+0x180>
     e26:	28 01       	movw	r4, r16
     e28:	22 e0       	ldi	r18, 0x02	; 2
     e2a:	42 0e       	add	r4, r18
     e2c:	51 1c       	adc	r5, r1
     e2e:	f8 01       	movw	r30, r16
     e30:	a0 80       	ld	r10, Z
     e32:	b1 80       	ldd	r11, Z+1	; 0x01
     e34:	36 fe       	sbrs	r3, 6
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <vfprintf+0x16e>
     e38:	69 2d       	mov	r22, r9
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <vfprintf+0x172>
     e3e:	6f ef       	ldi	r22, 0xFF	; 255
     e40:	7f ef       	ldi	r23, 0xFF	; 255
     e42:	c5 01       	movw	r24, r10
     e44:	46 d3       	rcall	.+1676   	; 0x14d2 <strnlen_P>
     e46:	4c 01       	movw	r8, r24
     e48:	f3 2d       	mov	r31, r3
     e4a:	f0 68       	ori	r31, 0x80	; 128
     e4c:	3f 2e       	mov	r3, r31
     e4e:	82 01       	movw	r16, r4
     e50:	33 fc       	sbrc	r3, 3
     e52:	19 c0       	rjmp	.+50     	; 0xe86 <vfprintf+0x1b6>
     e54:	82 2d       	mov	r24, r2
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	88 16       	cp	r8, r24
     e5a:	99 06       	cpc	r9, r25
     e5c:	a0 f4       	brcc	.+40     	; 0xe86 <vfprintf+0x1b6>
     e5e:	b6 01       	movw	r22, r12
     e60:	80 e2       	ldi	r24, 0x20	; 32
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	4c d3       	rcall	.+1688   	; 0x14fe <fputc>
     e66:	2a 94       	dec	r2
     e68:	f5 cf       	rjmp	.-22     	; 0xe54 <vfprintf+0x184>
     e6a:	f5 01       	movw	r30, r10
     e6c:	37 fc       	sbrc	r3, 7
     e6e:	85 91       	lpm	r24, Z+
     e70:	37 fe       	sbrs	r3, 7
     e72:	81 91       	ld	r24, Z+
     e74:	5f 01       	movw	r10, r30
     e76:	b6 01       	movw	r22, r12
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	41 d3       	rcall	.+1666   	; 0x14fe <fputc>
     e7c:	21 10       	cpse	r2, r1
     e7e:	2a 94       	dec	r2
     e80:	21 e0       	ldi	r18, 0x01	; 1
     e82:	82 1a       	sub	r8, r18
     e84:	91 08       	sbc	r9, r1
     e86:	81 14       	cp	r8, r1
     e88:	91 04       	cpc	r9, r1
     e8a:	79 f7       	brne	.-34     	; 0xe6a <vfprintf+0x19a>
     e8c:	e1 c0       	rjmp	.+450    	; 0x1050 <vfprintf+0x380>
     e8e:	84 36       	cpi	r24, 0x64	; 100
     e90:	11 f0       	breq	.+4      	; 0xe96 <vfprintf+0x1c6>
     e92:	89 36       	cpi	r24, 0x69	; 105
     e94:	39 f5       	brne	.+78     	; 0xee4 <vfprintf+0x214>
     e96:	f8 01       	movw	r30, r16
     e98:	37 fe       	sbrs	r3, 7
     e9a:	07 c0       	rjmp	.+14     	; 0xeaa <vfprintf+0x1da>
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0c 5f       	subi	r16, 0xFC	; 252
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
     ea8:	08 c0       	rjmp	.+16     	; 0xeba <vfprintf+0x1ea>
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	07 2e       	mov	r0, r23
     eb0:	00 0c       	add	r0, r0
     eb2:	88 0b       	sbc	r24, r24
     eb4:	99 0b       	sbc	r25, r25
     eb6:	0e 5f       	subi	r16, 0xFE	; 254
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	f3 2d       	mov	r31, r3
     ebc:	ff 76       	andi	r31, 0x6F	; 111
     ebe:	3f 2e       	mov	r3, r31
     ec0:	97 ff       	sbrs	r25, 7
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <vfprintf+0x206>
     ec4:	90 95       	com	r25
     ec6:	80 95       	com	r24
     ec8:	70 95       	com	r23
     eca:	61 95       	neg	r22
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	f0 68       	ori	r31, 0x80	; 128
     ed4:	3f 2e       	mov	r3, r31
     ed6:	2a e0       	ldi	r18, 0x0A	; 10
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	a3 01       	movw	r20, r6
     edc:	4c d3       	rcall	.+1688   	; 0x1576 <__ultoa_invert>
     ede:	88 2e       	mov	r8, r24
     ee0:	86 18       	sub	r8, r6
     ee2:	44 c0       	rjmp	.+136    	; 0xf6c <vfprintf+0x29c>
     ee4:	85 37       	cpi	r24, 0x75	; 117
     ee6:	31 f4       	brne	.+12     	; 0xef4 <vfprintf+0x224>
     ee8:	23 2d       	mov	r18, r3
     eea:	2f 7e       	andi	r18, 0xEF	; 239
     eec:	b2 2e       	mov	r11, r18
     eee:	2a e0       	ldi	r18, 0x0A	; 10
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	25 c0       	rjmp	.+74     	; 0xf3e <vfprintf+0x26e>
     ef4:	93 2d       	mov	r25, r3
     ef6:	99 7f       	andi	r25, 0xF9	; 249
     ef8:	b9 2e       	mov	r11, r25
     efa:	8f 36       	cpi	r24, 0x6F	; 111
     efc:	c1 f0       	breq	.+48     	; 0xf2e <vfprintf+0x25e>
     efe:	18 f4       	brcc	.+6      	; 0xf06 <vfprintf+0x236>
     f00:	88 35       	cpi	r24, 0x58	; 88
     f02:	79 f0       	breq	.+30     	; 0xf22 <vfprintf+0x252>
     f04:	ae c0       	rjmp	.+348    	; 0x1062 <vfprintf+0x392>
     f06:	80 37       	cpi	r24, 0x70	; 112
     f08:	19 f0       	breq	.+6      	; 0xf10 <vfprintf+0x240>
     f0a:	88 37       	cpi	r24, 0x78	; 120
     f0c:	21 f0       	breq	.+8      	; 0xf16 <vfprintf+0x246>
     f0e:	a9 c0       	rjmp	.+338    	; 0x1062 <vfprintf+0x392>
     f10:	e9 2f       	mov	r30, r25
     f12:	e0 61       	ori	r30, 0x10	; 16
     f14:	be 2e       	mov	r11, r30
     f16:	b4 fe       	sbrs	r11, 4
     f18:	0d c0       	rjmp	.+26     	; 0xf34 <vfprintf+0x264>
     f1a:	fb 2d       	mov	r31, r11
     f1c:	f4 60       	ori	r31, 0x04	; 4
     f1e:	bf 2e       	mov	r11, r31
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x264>
     f22:	34 fe       	sbrs	r3, 4
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <vfprintf+0x26a>
     f26:	29 2f       	mov	r18, r25
     f28:	26 60       	ori	r18, 0x06	; 6
     f2a:	b2 2e       	mov	r11, r18
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0x26a>
     f2e:	28 e0       	ldi	r18, 0x08	; 8
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <vfprintf+0x26e>
     f34:	20 e1       	ldi	r18, 0x10	; 16
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <vfprintf+0x26e>
     f3a:	20 e1       	ldi	r18, 0x10	; 16
     f3c:	32 e0       	ldi	r19, 0x02	; 2
     f3e:	f8 01       	movw	r30, r16
     f40:	b7 fe       	sbrs	r11, 7
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <vfprintf+0x282>
     f44:	60 81       	ld	r22, Z
     f46:	71 81       	ldd	r23, Z+1	; 0x01
     f48:	82 81       	ldd	r24, Z+2	; 0x02
     f4a:	93 81       	ldd	r25, Z+3	; 0x03
     f4c:	0c 5f       	subi	r16, 0xFC	; 252
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x28e>
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 5f       	subi	r16, 0xFE	; 254
     f5c:	1f 4f       	sbci	r17, 0xFF	; 255
     f5e:	a3 01       	movw	r20, r6
     f60:	0a d3       	rcall	.+1556   	; 0x1576 <__ultoa_invert>
     f62:	88 2e       	mov	r8, r24
     f64:	86 18       	sub	r8, r6
     f66:	fb 2d       	mov	r31, r11
     f68:	ff 77       	andi	r31, 0x7F	; 127
     f6a:	3f 2e       	mov	r3, r31
     f6c:	36 fe       	sbrs	r3, 6
     f6e:	0d c0       	rjmp	.+26     	; 0xf8a <vfprintf+0x2ba>
     f70:	23 2d       	mov	r18, r3
     f72:	2e 7f       	andi	r18, 0xFE	; 254
     f74:	a2 2e       	mov	r10, r18
     f76:	89 14       	cp	r8, r9
     f78:	58 f4       	brcc	.+22     	; 0xf90 <vfprintf+0x2c0>
     f7a:	34 fe       	sbrs	r3, 4
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <vfprintf+0x2c4>
     f7e:	32 fc       	sbrc	r3, 2
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <vfprintf+0x2c4>
     f82:	83 2d       	mov	r24, r3
     f84:	8e 7e       	andi	r24, 0xEE	; 238
     f86:	a8 2e       	mov	r10, r24
     f88:	05 c0       	rjmp	.+10     	; 0xf94 <vfprintf+0x2c4>
     f8a:	b8 2c       	mov	r11, r8
     f8c:	a3 2c       	mov	r10, r3
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <vfprintf+0x2c6>
     f90:	b8 2c       	mov	r11, r8
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <vfprintf+0x2c6>
     f94:	b9 2c       	mov	r11, r9
     f96:	a4 fe       	sbrs	r10, 4
     f98:	0f c0       	rjmp	.+30     	; 0xfb8 <vfprintf+0x2e8>
     f9a:	fe 01       	movw	r30, r28
     f9c:	e8 0d       	add	r30, r8
     f9e:	f1 1d       	adc	r31, r1
     fa0:	80 81       	ld	r24, Z
     fa2:	80 33       	cpi	r24, 0x30	; 48
     fa4:	21 f4       	brne	.+8      	; 0xfae <vfprintf+0x2de>
     fa6:	9a 2d       	mov	r25, r10
     fa8:	99 7e       	andi	r25, 0xE9	; 233
     faa:	a9 2e       	mov	r10, r25
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <vfprintf+0x2f0>
     fae:	a2 fe       	sbrs	r10, 2
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <vfprintf+0x2ee>
     fb2:	b3 94       	inc	r11
     fb4:	b3 94       	inc	r11
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <vfprintf+0x2f0>
     fb8:	8a 2d       	mov	r24, r10
     fba:	86 78       	andi	r24, 0x86	; 134
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <vfprintf+0x2f0>
     fbe:	b3 94       	inc	r11
     fc0:	a3 fc       	sbrc	r10, 3
     fc2:	10 c0       	rjmp	.+32     	; 0xfe4 <vfprintf+0x314>
     fc4:	a0 fe       	sbrs	r10, 0
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x304>
     fc8:	b2 14       	cp	r11, r2
     fca:	80 f4       	brcc	.+32     	; 0xfec <vfprintf+0x31c>
     fcc:	28 0c       	add	r2, r8
     fce:	92 2c       	mov	r9, r2
     fd0:	9b 18       	sub	r9, r11
     fd2:	0d c0       	rjmp	.+26     	; 0xfee <vfprintf+0x31e>
     fd4:	b2 14       	cp	r11, r2
     fd6:	58 f4       	brcc	.+22     	; 0xfee <vfprintf+0x31e>
     fd8:	b6 01       	movw	r22, r12
     fda:	80 e2       	ldi	r24, 0x20	; 32
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	8f d2       	rcall	.+1310   	; 0x14fe <fputc>
     fe0:	b3 94       	inc	r11
     fe2:	f8 cf       	rjmp	.-16     	; 0xfd4 <vfprintf+0x304>
     fe4:	b2 14       	cp	r11, r2
     fe6:	18 f4       	brcc	.+6      	; 0xfee <vfprintf+0x31e>
     fe8:	2b 18       	sub	r2, r11
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x320>
     fec:	98 2c       	mov	r9, r8
     fee:	21 2c       	mov	r2, r1
     ff0:	a4 fe       	sbrs	r10, 4
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <vfprintf+0x342>
     ff4:	b6 01       	movw	r22, r12
     ff6:	80 e3       	ldi	r24, 0x30	; 48
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	81 d2       	rcall	.+1282   	; 0x14fe <fputc>
     ffc:	a2 fe       	sbrs	r10, 2
     ffe:	16 c0       	rjmp	.+44     	; 0x102c <vfprintf+0x35c>
    1000:	a1 fc       	sbrc	r10, 1
    1002:	03 c0       	rjmp	.+6      	; 0x100a <vfprintf+0x33a>
    1004:	88 e7       	ldi	r24, 0x78	; 120
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 c0       	rjmp	.+4      	; 0x100e <vfprintf+0x33e>
    100a:	88 e5       	ldi	r24, 0x58	; 88
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	b6 01       	movw	r22, r12
    1010:	0c c0       	rjmp	.+24     	; 0x102a <vfprintf+0x35a>
    1012:	8a 2d       	mov	r24, r10
    1014:	86 78       	andi	r24, 0x86	; 134
    1016:	51 f0       	breq	.+20     	; 0x102c <vfprintf+0x35c>
    1018:	a1 fe       	sbrs	r10, 1
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <vfprintf+0x350>
    101c:	8b e2       	ldi	r24, 0x2B	; 43
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <vfprintf+0x352>
    1020:	80 e2       	ldi	r24, 0x20	; 32
    1022:	a7 fc       	sbrc	r10, 7
    1024:	8d e2       	ldi	r24, 0x2D	; 45
    1026:	b6 01       	movw	r22, r12
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	69 d2       	rcall	.+1234   	; 0x14fe <fputc>
    102c:	89 14       	cp	r8, r9
    102e:	30 f4       	brcc	.+12     	; 0x103c <vfprintf+0x36c>
    1030:	b6 01       	movw	r22, r12
    1032:	80 e3       	ldi	r24, 0x30	; 48
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	63 d2       	rcall	.+1222   	; 0x14fe <fputc>
    1038:	9a 94       	dec	r9
    103a:	f8 cf       	rjmp	.-16     	; 0x102c <vfprintf+0x35c>
    103c:	8a 94       	dec	r8
    103e:	f3 01       	movw	r30, r6
    1040:	e8 0d       	add	r30, r8
    1042:	f1 1d       	adc	r31, r1
    1044:	80 81       	ld	r24, Z
    1046:	b6 01       	movw	r22, r12
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	59 d2       	rcall	.+1202   	; 0x14fe <fputc>
    104c:	81 10       	cpse	r8, r1
    104e:	f6 cf       	rjmp	.-20     	; 0x103c <vfprintf+0x36c>
    1050:	22 20       	and	r2, r2
    1052:	09 f4       	brne	.+2      	; 0x1056 <vfprintf+0x386>
    1054:	4e ce       	rjmp	.-868    	; 0xcf2 <vfprintf+0x22>
    1056:	b6 01       	movw	r22, r12
    1058:	80 e2       	ldi	r24, 0x20	; 32
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	50 d2       	rcall	.+1184   	; 0x14fe <fputc>
    105e:	2a 94       	dec	r2
    1060:	f7 cf       	rjmp	.-18     	; 0x1050 <vfprintf+0x380>
    1062:	f6 01       	movw	r30, r12
    1064:	86 81       	ldd	r24, Z+6	; 0x06
    1066:	97 81       	ldd	r25, Z+7	; 0x07
    1068:	02 c0       	rjmp	.+4      	; 0x106e <vfprintf+0x39e>
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	9f ef       	ldi	r25, 0xFF	; 255
    106e:	2b 96       	adiw	r28, 0x0b	; 11
    1070:	e2 e1       	ldi	r30, 0x12	; 18
    1072:	fb c2       	rjmp	.+1526   	; 0x166a <__epilogue_restores__>

00001074 <dtoa_prf>:
    1074:	a9 e0       	ldi	r26, 0x09	; 9
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ef e3       	ldi	r30, 0x3F	; 63
    107a:	f8 e0       	ldi	r31, 0x08	; 8
    107c:	e0 c2       	rjmp	.+1472   	; 0x163e <__prologue_saves__+0xc>
    107e:	6a 01       	movw	r12, r20
    1080:	12 2f       	mov	r17, r18
    1082:	b0 2e       	mov	r11, r16
    1084:	2b e3       	ldi	r18, 0x3B	; 59
    1086:	20 17       	cp	r18, r16
    1088:	20 f0       	brcs	.+8      	; 0x1092 <dtoa_prf+0x1e>
    108a:	ff 24       	eor	r15, r15
    108c:	f3 94       	inc	r15
    108e:	f0 0e       	add	r15, r16
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <dtoa_prf+0x22>
    1092:	2c e3       	ldi	r18, 0x3C	; 60
    1094:	f2 2e       	mov	r15, r18
    1096:	0f 2d       	mov	r16, r15
    1098:	27 e0       	ldi	r18, 0x07	; 7
    109a:	ae 01       	movw	r20, r28
    109c:	4f 5f       	subi	r20, 0xFF	; 255
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	40 d1       	rcall	.+640    	; 0x1322 <__ftoa_engine>
    10a2:	bc 01       	movw	r22, r24
    10a4:	49 81       	ldd	r20, Y+1	; 0x01
    10a6:	84 2f       	mov	r24, r20
    10a8:	89 70       	andi	r24, 0x09	; 9
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	31 f0       	breq	.+12     	; 0x10ba <dtoa_prf+0x46>
    10ae:	e1 fc       	sbrc	r14, 1
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <dtoa_prf+0x4a>
    10b2:	e0 fe       	sbrs	r14, 0
    10b4:	06 c0       	rjmp	.+12     	; 0x10c2 <dtoa_prf+0x4e>
    10b6:	90 e2       	ldi	r25, 0x20	; 32
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <dtoa_prf+0x50>
    10ba:	9d e2       	ldi	r25, 0x2D	; 45
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <dtoa_prf+0x50>
    10be:	9b e2       	ldi	r25, 0x2B	; 43
    10c0:	01 c0       	rjmp	.+2      	; 0x10c4 <dtoa_prf+0x50>
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	5e 2d       	mov	r21, r14
    10c6:	50 71       	andi	r21, 0x10	; 16
    10c8:	43 ff       	sbrs	r20, 3
    10ca:	3c c0       	rjmp	.+120    	; 0x1144 <dtoa_prf+0xd0>
    10cc:	91 11       	cpse	r25, r1
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <dtoa_prf+0x60>
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <dtoa_prf+0x62>
    10d4:	84 e0       	ldi	r24, 0x04	; 4
    10d6:	81 17       	cp	r24, r17
    10d8:	18 f4       	brcc	.+6      	; 0x10e0 <dtoa_prf+0x6c>
    10da:	21 2f       	mov	r18, r17
    10dc:	28 1b       	sub	r18, r24
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <dtoa_prf+0x6e>
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	51 11       	cpse	r21, r1
    10e4:	0b c0       	rjmp	.+22     	; 0x10fc <dtoa_prf+0x88>
    10e6:	f6 01       	movw	r30, r12
    10e8:	82 2f       	mov	r24, r18
    10ea:	30 e2       	ldi	r19, 0x20	; 32
    10ec:	88 23       	and	r24, r24
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <dtoa_prf+0x82>
    10f0:	31 93       	st	Z+, r19
    10f2:	81 50       	subi	r24, 0x01	; 1
    10f4:	fb cf       	rjmp	.-10     	; 0x10ec <dtoa_prf+0x78>
    10f6:	c2 0e       	add	r12, r18
    10f8:	d1 1c       	adc	r13, r1
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	99 23       	and	r25, r25
    10fe:	29 f0       	breq	.+10     	; 0x110a <dtoa_prf+0x96>
    1100:	d6 01       	movw	r26, r12
    1102:	9c 93       	st	X, r25
    1104:	f6 01       	movw	r30, r12
    1106:	31 96       	adiw	r30, 0x01	; 1
    1108:	6f 01       	movw	r12, r30
    110a:	c6 01       	movw	r24, r12
    110c:	03 96       	adiw	r24, 0x03	; 3
    110e:	e2 fe       	sbrs	r14, 2
    1110:	0a c0       	rjmp	.+20     	; 0x1126 <dtoa_prf+0xb2>
    1112:	3e e4       	ldi	r19, 0x4E	; 78
    1114:	d6 01       	movw	r26, r12
    1116:	3c 93       	st	X, r19
    1118:	41 e4       	ldi	r20, 0x41	; 65
    111a:	11 96       	adiw	r26, 0x01	; 1
    111c:	4c 93       	st	X, r20
    111e:	11 97       	sbiw	r26, 0x01	; 1
    1120:	12 96       	adiw	r26, 0x02	; 2
    1122:	3c 93       	st	X, r19
    1124:	06 c0       	rjmp	.+12     	; 0x1132 <dtoa_prf+0xbe>
    1126:	3e e6       	ldi	r19, 0x6E	; 110
    1128:	f6 01       	movw	r30, r12
    112a:	30 83       	st	Z, r19
    112c:	41 e6       	ldi	r20, 0x61	; 97
    112e:	41 83       	std	Z+1, r20	; 0x01
    1130:	32 83       	std	Z+2, r19	; 0x02
    1132:	fc 01       	movw	r30, r24
    1134:	32 2f       	mov	r19, r18
    1136:	40 e2       	ldi	r20, 0x20	; 32
    1138:	33 23       	and	r19, r19
    113a:	09 f4       	brne	.+2      	; 0x113e <dtoa_prf+0xca>
    113c:	42 c0       	rjmp	.+132    	; 0x11c2 <dtoa_prf+0x14e>
    113e:	41 93       	st	Z+, r20
    1140:	31 50       	subi	r19, 0x01	; 1
    1142:	fa cf       	rjmp	.-12     	; 0x1138 <dtoa_prf+0xc4>
    1144:	42 ff       	sbrs	r20, 2
    1146:	44 c0       	rjmp	.+136    	; 0x11d0 <dtoa_prf+0x15c>
    1148:	91 11       	cpse	r25, r1
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <dtoa_prf+0xdc>
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <dtoa_prf+0xde>
    1150:	84 e0       	ldi	r24, 0x04	; 4
    1152:	81 17       	cp	r24, r17
    1154:	18 f4       	brcc	.+6      	; 0x115c <dtoa_prf+0xe8>
    1156:	21 2f       	mov	r18, r17
    1158:	28 1b       	sub	r18, r24
    115a:	01 c0       	rjmp	.+2      	; 0x115e <dtoa_prf+0xea>
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	51 11       	cpse	r21, r1
    1160:	0b c0       	rjmp	.+22     	; 0x1178 <dtoa_prf+0x104>
    1162:	f6 01       	movw	r30, r12
    1164:	82 2f       	mov	r24, r18
    1166:	30 e2       	ldi	r19, 0x20	; 32
    1168:	88 23       	and	r24, r24
    116a:	19 f0       	breq	.+6      	; 0x1172 <dtoa_prf+0xfe>
    116c:	31 93       	st	Z+, r19
    116e:	81 50       	subi	r24, 0x01	; 1
    1170:	fb cf       	rjmp	.-10     	; 0x1168 <dtoa_prf+0xf4>
    1172:	c2 0e       	add	r12, r18
    1174:	d1 1c       	adc	r13, r1
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	99 23       	and	r25, r25
    117a:	29 f0       	breq	.+10     	; 0x1186 <dtoa_prf+0x112>
    117c:	d6 01       	movw	r26, r12
    117e:	9c 93       	st	X, r25
    1180:	f6 01       	movw	r30, r12
    1182:	31 96       	adiw	r30, 0x01	; 1
    1184:	6f 01       	movw	r12, r30
    1186:	c6 01       	movw	r24, r12
    1188:	03 96       	adiw	r24, 0x03	; 3
    118a:	e2 fe       	sbrs	r14, 2
    118c:	0b c0       	rjmp	.+22     	; 0x11a4 <dtoa_prf+0x130>
    118e:	39 e4       	ldi	r19, 0x49	; 73
    1190:	d6 01       	movw	r26, r12
    1192:	3c 93       	st	X, r19
    1194:	3e e4       	ldi	r19, 0x4E	; 78
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	3c 93       	st	X, r19
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	36 e4       	ldi	r19, 0x46	; 70
    119e:	12 96       	adiw	r26, 0x02	; 2
    11a0:	3c 93       	st	X, r19
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <dtoa_prf+0x13e>
    11a4:	39 e6       	ldi	r19, 0x69	; 105
    11a6:	f6 01       	movw	r30, r12
    11a8:	30 83       	st	Z, r19
    11aa:	3e e6       	ldi	r19, 0x6E	; 110
    11ac:	31 83       	std	Z+1, r19	; 0x01
    11ae:	36 e6       	ldi	r19, 0x66	; 102
    11b0:	32 83       	std	Z+2, r19	; 0x02
    11b2:	fc 01       	movw	r30, r24
    11b4:	32 2f       	mov	r19, r18
    11b6:	40 e2       	ldi	r20, 0x20	; 32
    11b8:	33 23       	and	r19, r19
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <dtoa_prf+0x14e>
    11bc:	41 93       	st	Z+, r20
    11be:	31 50       	subi	r19, 0x01	; 1
    11c0:	fb cf       	rjmp	.-10     	; 0x11b8 <dtoa_prf+0x144>
    11c2:	fc 01       	movw	r30, r24
    11c4:	e2 0f       	add	r30, r18
    11c6:	f1 1d       	adc	r31, r1
    11c8:	10 82       	st	Z, r1
    11ca:	8e ef       	ldi	r24, 0xFE	; 254
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	a6 c0       	rjmp	.+332    	; 0x131c <dtoa_prf+0x2a8>
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	91 11       	cpse	r25, r1
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <dtoa_prf+0x168>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	16 16       	cp	r1, r22
    11de:	17 06       	cpc	r1, r23
    11e0:	1c f4       	brge	.+6      	; 0x11e8 <dtoa_prf+0x174>
    11e2:	fb 01       	movw	r30, r22
    11e4:	31 96       	adiw	r30, 0x01	; 1
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <dtoa_prf+0x178>
    11e8:	e1 e0       	ldi	r30, 0x01	; 1
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	2e 0f       	add	r18, r30
    11ee:	3f 1f       	adc	r19, r31
    11f0:	bb 20       	and	r11, r11
    11f2:	21 f0       	breq	.+8      	; 0x11fc <dtoa_prf+0x188>
    11f4:	eb 2d       	mov	r30, r11
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	31 96       	adiw	r30, 0x01	; 1
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <dtoa_prf+0x18c>
    11fc:	e0 e0       	ldi	r30, 0x00	; 0
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	2e 0f       	add	r18, r30
    1202:	3f 1f       	adc	r19, r31
    1204:	e1 2f       	mov	r30, r17
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	2e 17       	cp	r18, r30
    120a:	3f 07       	cpc	r19, r31
    120c:	1c f4       	brge	.+6      	; 0x1214 <dtoa_prf+0x1a0>
    120e:	12 1b       	sub	r17, r18
    1210:	21 2f       	mov	r18, r17
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <dtoa_prf+0x1a2>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	8e 2d       	mov	r24, r14
    1218:	88 71       	andi	r24, 0x18	; 24
    121a:	59 f4       	brne	.+22     	; 0x1232 <dtoa_prf+0x1be>
    121c:	f6 01       	movw	r30, r12
    121e:	82 2f       	mov	r24, r18
    1220:	30 e2       	ldi	r19, 0x20	; 32
    1222:	88 23       	and	r24, r24
    1224:	19 f0       	breq	.+6      	; 0x122c <dtoa_prf+0x1b8>
    1226:	31 93       	st	Z+, r19
    1228:	81 50       	subi	r24, 0x01	; 1
    122a:	fb cf       	rjmp	.-10     	; 0x1222 <dtoa_prf+0x1ae>
    122c:	c2 0e       	add	r12, r18
    122e:	d1 1c       	adc	r13, r1
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	99 23       	and	r25, r25
    1234:	29 f0       	breq	.+10     	; 0x1240 <dtoa_prf+0x1cc>
    1236:	d6 01       	movw	r26, r12
    1238:	9c 93       	st	X, r25
    123a:	f6 01       	movw	r30, r12
    123c:	31 96       	adiw	r30, 0x01	; 1
    123e:	6f 01       	movw	r12, r30
    1240:	51 11       	cpse	r21, r1
    1242:	0b c0       	rjmp	.+22     	; 0x125a <dtoa_prf+0x1e6>
    1244:	f6 01       	movw	r30, r12
    1246:	82 2f       	mov	r24, r18
    1248:	90 e3       	ldi	r25, 0x30	; 48
    124a:	88 23       	and	r24, r24
    124c:	19 f0       	breq	.+6      	; 0x1254 <dtoa_prf+0x1e0>
    124e:	91 93       	st	Z+, r25
    1250:	81 50       	subi	r24, 0x01	; 1
    1252:	fb cf       	rjmp	.-10     	; 0x124a <dtoa_prf+0x1d6>
    1254:	c2 0e       	add	r12, r18
    1256:	d1 1c       	adc	r13, r1
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	0f 2d       	mov	r16, r15
    125c:	06 0f       	add	r16, r22
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	34 2f       	mov	r19, r20
    1262:	30 71       	andi	r19, 0x10	; 16
    1264:	44 ff       	sbrs	r20, 4
    1266:	03 c0       	rjmp	.+6      	; 0x126e <dtoa_prf+0x1fa>
    1268:	91 33       	cpi	r25, 0x31	; 49
    126a:	09 f4       	brne	.+2      	; 0x126e <dtoa_prf+0x1fa>
    126c:	01 50       	subi	r16, 0x01	; 1
    126e:	10 16       	cp	r1, r16
    1270:	24 f4       	brge	.+8      	; 0x127a <dtoa_prf+0x206>
    1272:	09 30       	cpi	r16, 0x09	; 9
    1274:	18 f0       	brcs	.+6      	; 0x127c <dtoa_prf+0x208>
    1276:	08 e0       	ldi	r16, 0x08	; 8
    1278:	01 c0       	rjmp	.+2      	; 0x127c <dtoa_prf+0x208>
    127a:	01 e0       	ldi	r16, 0x01	; 1
    127c:	ab 01       	movw	r20, r22
    127e:	77 ff       	sbrs	r23, 7
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <dtoa_prf+0x212>
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	fb 01       	movw	r30, r22
    1288:	e4 1b       	sub	r30, r20
    128a:	f5 0b       	sbc	r31, r21
    128c:	a1 e0       	ldi	r26, 0x01	; 1
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ac 0f       	add	r26, r28
    1292:	bd 1f       	adc	r27, r29
    1294:	ea 0f       	add	r30, r26
    1296:	fb 1f       	adc	r31, r27
    1298:	8e e2       	ldi	r24, 0x2E	; 46
    129a:	a8 2e       	mov	r10, r24
    129c:	4b 01       	movw	r8, r22
    129e:	80 1a       	sub	r8, r16
    12a0:	91 08       	sbc	r9, r1
    12a2:	0b 2d       	mov	r16, r11
    12a4:	10 e0       	ldi	r17, 0x00	; 0
    12a6:	11 95       	neg	r17
    12a8:	01 95       	neg	r16
    12aa:	11 09       	sbc	r17, r1
    12ac:	4f 3f       	cpi	r20, 0xFF	; 255
    12ae:	bf ef       	ldi	r27, 0xFF	; 255
    12b0:	5b 07       	cpc	r21, r27
    12b2:	21 f4       	brne	.+8      	; 0x12bc <dtoa_prf+0x248>
    12b4:	d6 01       	movw	r26, r12
    12b6:	ac 92       	st	X, r10
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	6d 01       	movw	r12, r26
    12bc:	64 17       	cp	r22, r20
    12be:	75 07       	cpc	r23, r21
    12c0:	2c f0       	brlt	.+10     	; 0x12cc <dtoa_prf+0x258>
    12c2:	84 16       	cp	r8, r20
    12c4:	95 06       	cpc	r9, r21
    12c6:	14 f4       	brge	.+4      	; 0x12cc <dtoa_prf+0x258>
    12c8:	81 81       	ldd	r24, Z+1	; 0x01
    12ca:	01 c0       	rjmp	.+2      	; 0x12ce <dtoa_prf+0x25a>
    12cc:	80 e3       	ldi	r24, 0x30	; 48
    12ce:	41 50       	subi	r20, 0x01	; 1
    12d0:	51 09       	sbc	r21, r1
    12d2:	31 96       	adiw	r30, 0x01	; 1
    12d4:	d6 01       	movw	r26, r12
    12d6:	11 96       	adiw	r26, 0x01	; 1
    12d8:	7d 01       	movw	r14, r26
    12da:	40 17       	cp	r20, r16
    12dc:	51 07       	cpc	r21, r17
    12de:	24 f0       	brlt	.+8      	; 0x12e8 <dtoa_prf+0x274>
    12e0:	d6 01       	movw	r26, r12
    12e2:	8c 93       	st	X, r24
    12e4:	67 01       	movw	r12, r14
    12e6:	e2 cf       	rjmp	.-60     	; 0x12ac <dtoa_prf+0x238>
    12e8:	64 17       	cp	r22, r20
    12ea:	75 07       	cpc	r23, r21
    12ec:	39 f4       	brne	.+14     	; 0x12fc <dtoa_prf+0x288>
    12ee:	96 33       	cpi	r25, 0x36	; 54
    12f0:	20 f4       	brcc	.+8      	; 0x12fa <dtoa_prf+0x286>
    12f2:	95 33       	cpi	r25, 0x35	; 53
    12f4:	19 f4       	brne	.+6      	; 0x12fc <dtoa_prf+0x288>
    12f6:	31 11       	cpse	r19, r1
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <dtoa_prf+0x288>
    12fa:	81 e3       	ldi	r24, 0x31	; 49
    12fc:	f6 01       	movw	r30, r12
    12fe:	80 83       	st	Z, r24
    1300:	f7 01       	movw	r30, r14
    1302:	82 2f       	mov	r24, r18
    1304:	90 e2       	ldi	r25, 0x20	; 32
    1306:	88 23       	and	r24, r24
    1308:	19 f0       	breq	.+6      	; 0x1310 <dtoa_prf+0x29c>
    130a:	91 93       	st	Z+, r25
    130c:	81 50       	subi	r24, 0x01	; 1
    130e:	fb cf       	rjmp	.-10     	; 0x1306 <dtoa_prf+0x292>
    1310:	f7 01       	movw	r30, r14
    1312:	e2 0f       	add	r30, r18
    1314:	f1 1d       	adc	r31, r1
    1316:	10 82       	st	Z, r1
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	29 96       	adiw	r28, 0x09	; 9
    131e:	ec e0       	ldi	r30, 0x0C	; 12
    1320:	aa c1       	rjmp	.+852    	; 0x1676 <__epilogue_restores__+0xc>

00001322 <__ftoa_engine>:
    1322:	28 30       	cpi	r18, 0x08	; 8
    1324:	08 f0       	brcs	.+2      	; 0x1328 <__ftoa_engine+0x6>
    1326:	27 e0       	ldi	r18, 0x07	; 7
    1328:	33 27       	eor	r19, r19
    132a:	da 01       	movw	r26, r20
    132c:	99 0f       	add	r25, r25
    132e:	31 1d       	adc	r19, r1
    1330:	87 fd       	sbrc	r24, 7
    1332:	91 60       	ori	r25, 0x01	; 1
    1334:	00 96       	adiw	r24, 0x00	; 0
    1336:	61 05       	cpc	r22, r1
    1338:	71 05       	cpc	r23, r1
    133a:	39 f4       	brne	.+14     	; 0x134a <__ftoa_engine+0x28>
    133c:	32 60       	ori	r19, 0x02	; 2
    133e:	2e 5f       	subi	r18, 0xFE	; 254
    1340:	3d 93       	st	X+, r19
    1342:	30 e3       	ldi	r19, 0x30	; 48
    1344:	2a 95       	dec	r18
    1346:	e1 f7       	brne	.-8      	; 0x1340 <__ftoa_engine+0x1e>
    1348:	08 95       	ret
    134a:	9f 3f       	cpi	r25, 0xFF	; 255
    134c:	30 f0       	brcs	.+12     	; 0x135a <__ftoa_engine+0x38>
    134e:	80 38       	cpi	r24, 0x80	; 128
    1350:	71 05       	cpc	r23, r1
    1352:	61 05       	cpc	r22, r1
    1354:	09 f0       	breq	.+2      	; 0x1358 <__ftoa_engine+0x36>
    1356:	3c 5f       	subi	r19, 0xFC	; 252
    1358:	3c 5f       	subi	r19, 0xFC	; 252
    135a:	3d 93       	st	X+, r19
    135c:	91 30       	cpi	r25, 0x01	; 1
    135e:	08 f0       	brcs	.+2      	; 0x1362 <__ftoa_engine+0x40>
    1360:	80 68       	ori	r24, 0x80	; 128
    1362:	91 1d       	adc	r25, r1
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	1f 93       	push	r17
    136a:	0f 93       	push	r16
    136c:	ff 92       	push	r15
    136e:	ef 92       	push	r14
    1370:	19 2f       	mov	r17, r25
    1372:	98 7f       	andi	r25, 0xF8	; 248
    1374:	96 95       	lsr	r25
    1376:	e9 2f       	mov	r30, r25
    1378:	96 95       	lsr	r25
    137a:	96 95       	lsr	r25
    137c:	e9 0f       	add	r30, r25
    137e:	ff 27       	eor	r31, r31
    1380:	e2 57       	subi	r30, 0x72	; 114
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	99 27       	eor	r25, r25
    1386:	33 27       	eor	r19, r19
    1388:	ee 24       	eor	r14, r14
    138a:	ff 24       	eor	r15, r15
    138c:	a7 01       	movw	r20, r14
    138e:	e7 01       	movw	r28, r14
    1390:	05 90       	lpm	r0, Z+
    1392:	08 94       	sec
    1394:	07 94       	ror	r0
    1396:	28 f4       	brcc	.+10     	; 0x13a2 <__ftoa_engine+0x80>
    1398:	36 0f       	add	r19, r22
    139a:	e7 1e       	adc	r14, r23
    139c:	f8 1e       	adc	r15, r24
    139e:	49 1f       	adc	r20, r25
    13a0:	51 1d       	adc	r21, r1
    13a2:	66 0f       	add	r22, r22
    13a4:	77 1f       	adc	r23, r23
    13a6:	88 1f       	adc	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	06 94       	lsr	r0
    13ac:	a1 f7       	brne	.-24     	; 0x1396 <__ftoa_engine+0x74>
    13ae:	05 90       	lpm	r0, Z+
    13b0:	07 94       	ror	r0
    13b2:	28 f4       	brcc	.+10     	; 0x13be <__ftoa_engine+0x9c>
    13b4:	e7 0e       	add	r14, r23
    13b6:	f8 1e       	adc	r15, r24
    13b8:	49 1f       	adc	r20, r25
    13ba:	56 1f       	adc	r21, r22
    13bc:	c1 1d       	adc	r28, r1
    13be:	77 0f       	add	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	66 1f       	adc	r22, r22
    13c6:	06 94       	lsr	r0
    13c8:	a1 f7       	brne	.-24     	; 0x13b2 <__ftoa_engine+0x90>
    13ca:	05 90       	lpm	r0, Z+
    13cc:	07 94       	ror	r0
    13ce:	28 f4       	brcc	.+10     	; 0x13da <__ftoa_engine+0xb8>
    13d0:	f8 0e       	add	r15, r24
    13d2:	49 1f       	adc	r20, r25
    13d4:	56 1f       	adc	r21, r22
    13d6:	c7 1f       	adc	r28, r23
    13d8:	d1 1d       	adc	r29, r1
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	66 1f       	adc	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	06 94       	lsr	r0
    13e4:	a1 f7       	brne	.-24     	; 0x13ce <__ftoa_engine+0xac>
    13e6:	05 90       	lpm	r0, Z+
    13e8:	07 94       	ror	r0
    13ea:	20 f4       	brcc	.+8      	; 0x13f4 <__ftoa_engine+0xd2>
    13ec:	49 0f       	add	r20, r25
    13ee:	56 1f       	adc	r21, r22
    13f0:	c7 1f       	adc	r28, r23
    13f2:	d8 1f       	adc	r29, r24
    13f4:	99 0f       	add	r25, r25
    13f6:	66 1f       	adc	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	06 94       	lsr	r0
    13fe:	a9 f7       	brne	.-22     	; 0x13ea <__ftoa_engine+0xc8>
    1400:	84 91       	lpm	r24, Z
    1402:	10 95       	com	r17
    1404:	17 70       	andi	r17, 0x07	; 7
    1406:	41 f0       	breq	.+16     	; 0x1418 <__ftoa_engine+0xf6>
    1408:	d6 95       	lsr	r29
    140a:	c7 95       	ror	r28
    140c:	57 95       	ror	r21
    140e:	47 95       	ror	r20
    1410:	f7 94       	ror	r15
    1412:	e7 94       	ror	r14
    1414:	1a 95       	dec	r17
    1416:	c1 f7       	brne	.-16     	; 0x1408 <__ftoa_engine+0xe6>
    1418:	e4 e3       	ldi	r30, 0x34	; 52
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	68 94       	set
    141e:	15 90       	lpm	r1, Z+
    1420:	15 91       	lpm	r17, Z+
    1422:	35 91       	lpm	r19, Z+
    1424:	65 91       	lpm	r22, Z+
    1426:	95 91       	lpm	r25, Z+
    1428:	05 90       	lpm	r0, Z+
    142a:	7f e2       	ldi	r23, 0x2F	; 47
    142c:	73 95       	inc	r23
    142e:	e1 18       	sub	r14, r1
    1430:	f1 0a       	sbc	r15, r17
    1432:	43 0b       	sbc	r20, r19
    1434:	56 0b       	sbc	r21, r22
    1436:	c9 0b       	sbc	r28, r25
    1438:	d0 09       	sbc	r29, r0
    143a:	c0 f7       	brcc	.-16     	; 0x142c <__ftoa_engine+0x10a>
    143c:	e1 0c       	add	r14, r1
    143e:	f1 1e       	adc	r15, r17
    1440:	43 1f       	adc	r20, r19
    1442:	56 1f       	adc	r21, r22
    1444:	c9 1f       	adc	r28, r25
    1446:	d0 1d       	adc	r29, r0
    1448:	7e f4       	brtc	.+30     	; 0x1468 <__ftoa_engine+0x146>
    144a:	70 33       	cpi	r23, 0x30	; 48
    144c:	11 f4       	brne	.+4      	; 0x1452 <__ftoa_engine+0x130>
    144e:	8a 95       	dec	r24
    1450:	e6 cf       	rjmp	.-52     	; 0x141e <__ftoa_engine+0xfc>
    1452:	e8 94       	clt
    1454:	01 50       	subi	r16, 0x01	; 1
    1456:	30 f0       	brcs	.+12     	; 0x1464 <__ftoa_engine+0x142>
    1458:	08 0f       	add	r16, r24
    145a:	0a f4       	brpl	.+2      	; 0x145e <__ftoa_engine+0x13c>
    145c:	00 27       	eor	r16, r16
    145e:	02 17       	cp	r16, r18
    1460:	08 f4       	brcc	.+2      	; 0x1464 <__ftoa_engine+0x142>
    1462:	20 2f       	mov	r18, r16
    1464:	23 95       	inc	r18
    1466:	02 2f       	mov	r16, r18
    1468:	7a 33       	cpi	r23, 0x3A	; 58
    146a:	28 f0       	brcs	.+10     	; 0x1476 <__ftoa_engine+0x154>
    146c:	79 e3       	ldi	r23, 0x39	; 57
    146e:	7d 93       	st	X+, r23
    1470:	2a 95       	dec	r18
    1472:	e9 f7       	brne	.-6      	; 0x146e <__ftoa_engine+0x14c>
    1474:	10 c0       	rjmp	.+32     	; 0x1496 <__ftoa_engine+0x174>
    1476:	7d 93       	st	X+, r23
    1478:	2a 95       	dec	r18
    147a:	89 f6       	brne	.-94     	; 0x141e <__ftoa_engine+0xfc>
    147c:	06 94       	lsr	r0
    147e:	97 95       	ror	r25
    1480:	67 95       	ror	r22
    1482:	37 95       	ror	r19
    1484:	17 95       	ror	r17
    1486:	17 94       	ror	r1
    1488:	e1 18       	sub	r14, r1
    148a:	f1 0a       	sbc	r15, r17
    148c:	43 0b       	sbc	r20, r19
    148e:	56 0b       	sbc	r21, r22
    1490:	c9 0b       	sbc	r28, r25
    1492:	d0 09       	sbc	r29, r0
    1494:	98 f0       	brcs	.+38     	; 0x14bc <__ftoa_engine+0x19a>
    1496:	23 95       	inc	r18
    1498:	7e 91       	ld	r23, -X
    149a:	73 95       	inc	r23
    149c:	7a 33       	cpi	r23, 0x3A	; 58
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <__ftoa_engine+0x180>
    14a0:	70 e3       	ldi	r23, 0x30	; 48
    14a2:	7c 93       	st	X, r23
    14a4:	20 13       	cpse	r18, r16
    14a6:	b8 f7       	brcc	.-18     	; 0x1496 <__ftoa_engine+0x174>
    14a8:	7e 91       	ld	r23, -X
    14aa:	70 61       	ori	r23, 0x10	; 16
    14ac:	7d 93       	st	X+, r23
    14ae:	30 f0       	brcs	.+12     	; 0x14bc <__ftoa_engine+0x19a>
    14b0:	83 95       	inc	r24
    14b2:	71 e3       	ldi	r23, 0x31	; 49
    14b4:	7d 93       	st	X+, r23
    14b6:	70 e3       	ldi	r23, 0x30	; 48
    14b8:	2a 95       	dec	r18
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <__ftoa_engine+0x192>
    14bc:	11 24       	eor	r1, r1
    14be:	ef 90       	pop	r14
    14c0:	ff 90       	pop	r15
    14c2:	0f 91       	pop	r16
    14c4:	1f 91       	pop	r17
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	99 27       	eor	r25, r25
    14cc:	87 fd       	sbrc	r24, 7
    14ce:	90 95       	com	r25
    14d0:	08 95       	ret

000014d2 <strnlen_P>:
    14d2:	fc 01       	movw	r30, r24
    14d4:	05 90       	lpm	r0, Z+
    14d6:	61 50       	subi	r22, 0x01	; 1
    14d8:	70 40       	sbci	r23, 0x00	; 0
    14da:	01 10       	cpse	r0, r1
    14dc:	d8 f7       	brcc	.-10     	; 0x14d4 <strnlen_P+0x2>
    14de:	80 95       	com	r24
    14e0:	90 95       	com	r25
    14e2:	8e 0f       	add	r24, r30
    14e4:	9f 1f       	adc	r25, r31
    14e6:	08 95       	ret

000014e8 <strnlen>:
    14e8:	fc 01       	movw	r30, r24
    14ea:	61 50       	subi	r22, 0x01	; 1
    14ec:	70 40       	sbci	r23, 0x00	; 0
    14ee:	01 90       	ld	r0, Z+
    14f0:	01 10       	cpse	r0, r1
    14f2:	d8 f7       	brcc	.-10     	; 0x14ea <strnlen+0x2>
    14f4:	80 95       	com	r24
    14f6:	90 95       	com	r25
    14f8:	8e 0f       	add	r24, r30
    14fa:	9f 1f       	adc	r25, r31
    14fc:	08 95       	ret

000014fe <fputc>:
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	fb 01       	movw	r30, r22
    1508:	23 81       	ldd	r18, Z+3	; 0x03
    150a:	21 fd       	sbrc	r18, 1
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <fputc+0x16>
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	9f ef       	ldi	r25, 0xFF	; 255
    1512:	2c c0       	rjmp	.+88     	; 0x156c <fputc+0x6e>
    1514:	22 ff       	sbrs	r18, 2
    1516:	16 c0       	rjmp	.+44     	; 0x1544 <fputc+0x46>
    1518:	46 81       	ldd	r20, Z+6	; 0x06
    151a:	57 81       	ldd	r21, Z+7	; 0x07
    151c:	24 81       	ldd	r18, Z+4	; 0x04
    151e:	35 81       	ldd	r19, Z+5	; 0x05
    1520:	42 17       	cp	r20, r18
    1522:	53 07       	cpc	r21, r19
    1524:	44 f4       	brge	.+16     	; 0x1536 <fputc+0x38>
    1526:	a0 81       	ld	r26, Z
    1528:	b1 81       	ldd	r27, Z+1	; 0x01
    152a:	9d 01       	movw	r18, r26
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	31 83       	std	Z+1, r19	; 0x01
    1532:	20 83       	st	Z, r18
    1534:	8c 93       	st	X, r24
    1536:	26 81       	ldd	r18, Z+6	; 0x06
    1538:	37 81       	ldd	r19, Z+7	; 0x07
    153a:	2f 5f       	subi	r18, 0xFF	; 255
    153c:	3f 4f       	sbci	r19, 0xFF	; 255
    153e:	37 83       	std	Z+7, r19	; 0x07
    1540:	26 83       	std	Z+6, r18	; 0x06
    1542:	14 c0       	rjmp	.+40     	; 0x156c <fputc+0x6e>
    1544:	8b 01       	movw	r16, r22
    1546:	ec 01       	movw	r28, r24
    1548:	fb 01       	movw	r30, r22
    154a:	00 84       	ldd	r0, Z+8	; 0x08
    154c:	f1 85       	ldd	r31, Z+9	; 0x09
    154e:	e0 2d       	mov	r30, r0
    1550:	09 95       	icall
    1552:	89 2b       	or	r24, r25
    1554:	e1 f6       	brne	.-72     	; 0x150e <fputc+0x10>
    1556:	d8 01       	movw	r26, r16
    1558:	16 96       	adiw	r26, 0x06	; 6
    155a:	8d 91       	ld	r24, X+
    155c:	9c 91       	ld	r25, X
    155e:	17 97       	sbiw	r26, 0x07	; 7
    1560:	01 96       	adiw	r24, 0x01	; 1
    1562:	17 96       	adiw	r26, 0x07	; 7
    1564:	9c 93       	st	X, r25
    1566:	8e 93       	st	-X, r24
    1568:	16 97       	sbiw	r26, 0x06	; 6
    156a:	ce 01       	movw	r24, r28
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret

00001576 <__ultoa_invert>:
    1576:	fa 01       	movw	r30, r20
    1578:	aa 27       	eor	r26, r26
    157a:	28 30       	cpi	r18, 0x08	; 8
    157c:	51 f1       	breq	.+84     	; 0x15d2 <__ultoa_invert+0x5c>
    157e:	20 31       	cpi	r18, 0x10	; 16
    1580:	81 f1       	breq	.+96     	; 0x15e2 <__ultoa_invert+0x6c>
    1582:	e8 94       	clt
    1584:	6f 93       	push	r22
    1586:	6e 7f       	andi	r22, 0xFE	; 254
    1588:	6e 5f       	subi	r22, 0xFE	; 254
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	8f 4f       	sbci	r24, 0xFF	; 255
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	af 4f       	sbci	r26, 0xFF	; 255
    1592:	b1 e0       	ldi	r27, 0x01	; 1
    1594:	3e d0       	rcall	.+124    	; 0x1612 <__ultoa_invert+0x9c>
    1596:	b4 e0       	ldi	r27, 0x04	; 4
    1598:	3c d0       	rcall	.+120    	; 0x1612 <__ultoa_invert+0x9c>
    159a:	67 0f       	add	r22, r23
    159c:	78 1f       	adc	r23, r24
    159e:	89 1f       	adc	r24, r25
    15a0:	9a 1f       	adc	r25, r26
    15a2:	a1 1d       	adc	r26, r1
    15a4:	68 0f       	add	r22, r24
    15a6:	79 1f       	adc	r23, r25
    15a8:	8a 1f       	adc	r24, r26
    15aa:	91 1d       	adc	r25, r1
    15ac:	a1 1d       	adc	r26, r1
    15ae:	6a 0f       	add	r22, r26
    15b0:	71 1d       	adc	r23, r1
    15b2:	81 1d       	adc	r24, r1
    15b4:	91 1d       	adc	r25, r1
    15b6:	a1 1d       	adc	r26, r1
    15b8:	20 d0       	rcall	.+64     	; 0x15fa <__ultoa_invert+0x84>
    15ba:	09 f4       	brne	.+2      	; 0x15be <__ultoa_invert+0x48>
    15bc:	68 94       	set
    15be:	3f 91       	pop	r19
    15c0:	2a e0       	ldi	r18, 0x0A	; 10
    15c2:	26 9f       	mul	r18, r22
    15c4:	11 24       	eor	r1, r1
    15c6:	30 19       	sub	r19, r0
    15c8:	30 5d       	subi	r19, 0xD0	; 208
    15ca:	31 93       	st	Z+, r19
    15cc:	de f6       	brtc	.-74     	; 0x1584 <__ultoa_invert+0xe>
    15ce:	cf 01       	movw	r24, r30
    15d0:	08 95       	ret
    15d2:	46 2f       	mov	r20, r22
    15d4:	47 70       	andi	r20, 0x07	; 7
    15d6:	40 5d       	subi	r20, 0xD0	; 208
    15d8:	41 93       	st	Z+, r20
    15da:	b3 e0       	ldi	r27, 0x03	; 3
    15dc:	0f d0       	rcall	.+30     	; 0x15fc <__ultoa_invert+0x86>
    15de:	c9 f7       	brne	.-14     	; 0x15d2 <__ultoa_invert+0x5c>
    15e0:	f6 cf       	rjmp	.-20     	; 0x15ce <__ultoa_invert+0x58>
    15e2:	46 2f       	mov	r20, r22
    15e4:	4f 70       	andi	r20, 0x0F	; 15
    15e6:	40 5d       	subi	r20, 0xD0	; 208
    15e8:	4a 33       	cpi	r20, 0x3A	; 58
    15ea:	18 f0       	brcs	.+6      	; 0x15f2 <__ultoa_invert+0x7c>
    15ec:	49 5d       	subi	r20, 0xD9	; 217
    15ee:	31 fd       	sbrc	r19, 1
    15f0:	40 52       	subi	r20, 0x20	; 32
    15f2:	41 93       	st	Z+, r20
    15f4:	02 d0       	rcall	.+4      	; 0x15fa <__ultoa_invert+0x84>
    15f6:	a9 f7       	brne	.-22     	; 0x15e2 <__ultoa_invert+0x6c>
    15f8:	ea cf       	rjmp	.-44     	; 0x15ce <__ultoa_invert+0x58>
    15fa:	b4 e0       	ldi	r27, 0x04	; 4
    15fc:	a6 95       	lsr	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	ba 95       	dec	r27
    1608:	c9 f7       	brne	.-14     	; 0x15fc <__ultoa_invert+0x86>
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	61 05       	cpc	r22, r1
    160e:	71 05       	cpc	r23, r1
    1610:	08 95       	ret
    1612:	9b 01       	movw	r18, r22
    1614:	ac 01       	movw	r20, r24
    1616:	0a 2e       	mov	r0, r26
    1618:	06 94       	lsr	r0
    161a:	57 95       	ror	r21
    161c:	47 95       	ror	r20
    161e:	37 95       	ror	r19
    1620:	27 95       	ror	r18
    1622:	ba 95       	dec	r27
    1624:	c9 f7       	brne	.-14     	; 0x1618 <__ultoa_invert+0xa2>
    1626:	62 0f       	add	r22, r18
    1628:	73 1f       	adc	r23, r19
    162a:	84 1f       	adc	r24, r20
    162c:	95 1f       	adc	r25, r21
    162e:	a0 1d       	adc	r26, r0
    1630:	08 95       	ret

00001632 <__prologue_saves__>:
    1632:	2f 92       	push	r2
    1634:	3f 92       	push	r3
    1636:	4f 92       	push	r4
    1638:	5f 92       	push	r5
    163a:	6f 92       	push	r6
    163c:	7f 92       	push	r7
    163e:	8f 92       	push	r8
    1640:	9f 92       	push	r9
    1642:	af 92       	push	r10
    1644:	bf 92       	push	r11
    1646:	cf 92       	push	r12
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	ca 1b       	sub	r28, r26
    165c:	db 0b       	sbc	r29, r27
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	09 94       	ijmp

0000166a <__epilogue_restores__>:
    166a:	2a 88       	ldd	r2, Y+18	; 0x12
    166c:	39 88       	ldd	r3, Y+17	; 0x11
    166e:	48 88       	ldd	r4, Y+16	; 0x10
    1670:	5f 84       	ldd	r5, Y+15	; 0x0f
    1672:	6e 84       	ldd	r6, Y+14	; 0x0e
    1674:	7d 84       	ldd	r7, Y+13	; 0x0d
    1676:	8c 84       	ldd	r8, Y+12	; 0x0c
    1678:	9b 84       	ldd	r9, Y+11	; 0x0b
    167a:	aa 84       	ldd	r10, Y+10	; 0x0a
    167c:	b9 84       	ldd	r11, Y+9	; 0x09
    167e:	c8 84       	ldd	r12, Y+8	; 0x08
    1680:	df 80       	ldd	r13, Y+7	; 0x07
    1682:	ee 80       	ldd	r14, Y+6	; 0x06
    1684:	fd 80       	ldd	r15, Y+5	; 0x05
    1686:	0c 81       	ldd	r16, Y+4	; 0x04
    1688:	1b 81       	ldd	r17, Y+3	; 0x03
    168a:	aa 81       	ldd	r26, Y+2	; 0x02
    168c:	b9 81       	ldd	r27, Y+1	; 0x01
    168e:	ce 0f       	add	r28, r30
    1690:	d1 1d       	adc	r29, r1
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	ed 01       	movw	r28, r26
    169e:	08 95       	ret

000016a0 <_exit>:
    16a0:	f8 94       	cli

000016a2 <__stop_program>:
    16a2:	ff cf       	rjmp	.-2      	; 0x16a2 <__stop_program>
